     1                                  %define USE_SYSTEM_CALL
     2                                  %define USE_TEST_AND_SET
     3                                  
     4                                  %include "../include/define.s"
     5                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     6                              <1> 
     7                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     8                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     9                              <1> 
    10                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    11                              <1> 
    12                              <1>     E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    15                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    16                              <1> 
    17                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    18                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    19                              <1> 
    20                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    21                              <1> 
    22                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    23                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    24                              <1> 
    25                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    26                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    27                              <1>     SP_TASK_2 equ STACK_BASE + (STACK_SIZE * 3)
    28                              <1>     SP_TASK_3 equ STACK_BASE + (STACK_SIZE * 4)
    29                              <1>     SP_TASK_4 equ STACK_BASE + (STACK_SIZE * 5)
    30                              <1>     SP_TASK_5 equ STACK_BASE + (STACK_SIZE * 6)
    31                              <1>     SP_TASK_6 equ STACK_BASE + (STACK_SIZE * 7)
    32                              <1> 
    33                              <1>     PARAM_TASK_4 equ 0x0010_8000            ; 描画パラメータ：タスク4用
    34                              <1>     PARAM_TASK_5 equ 0x0010_9000            ; 描画パラメータ：タスク5用
    35                              <1>     PARAM_TASK_6 equ 0x0010_A000            ; 描画パラメータ：タスク6用
    36                              <1> 
    37                              <1>     CR3_BASE equ 0x0010_5000    ; ページ変換テーブル タスク3用
    38                              <1> 
    39                              <1>     CR3_TASK_4 equ 0x0020_0000  ; ページ変換テーブル タスク4用
    40                              <1>     CR3_TASK_5 equ 0x0020_2000  ; ページ変換テーブル タスク5用
    41                              <1>     CR3_TASK_6 equ 0x0020_4000  ; ページ変換テーブル タスク6用
    42                              <1> 
    43                              <1> 
    44                              <1>     FAT_SIZE equ (1024 * 128)   ; FAT-1/2
    45                              <1>     ROOT_SIZE equ (1024 *  16)  ; ルートディレクトリ領域
    46                              <1> 
    47                              <1>     ENTRY_SIZE equ 32           ; エントリサイズ
    48                              <1> 
    49                              <1>     ; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
    50                              <1>     FAT_OFFSET equ (BOOT_SIZE + KERNEL_SIZE)
    51                              <1>     FAT1_START equ (KERNEL_SIZE)
    52                              <1>     FAT2_START equ (FAT1_START + FAT_SIZE)
    53                              <1>     ROOT_START equ (FAT2_START + FAT_SIZE)
    54                              <1>     FILE_START equ (ROOT_START + ROOT_SIZE)
    55                              <1> 
    56                              <1>     ; ファイル属性
    57                              <1>     ATTR_READ_ONLY equ 0x01
    58                              <1>     ATTR_HIDDEN equ 0x02
    59                              <1>     ATTR_SYSTEM equ 0x04
    60                              <1>     ATTR_VOLUME_ID equ 0x08
    61                              <1>     ATTR_DIRECTORY equ 0x10
    62                              <1>     ATTR_ARCHIVE equ 0x20
     5                                  %include "../include/macro.s"
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> struc drive
    23 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    24 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    25 00000004 ????                <1>     .head resw 1    ; ヘッド
    26 00000006 ????                <1>     .sect resw 1    ; セクタ
    27                              <1> endstruc
    28                              <1> 
    29                              <1> %macro set_vect 1-*
    30                              <1>         push eax
    31                              <1>         push edi
    32                              <1> 
    33                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    34                              <1>         mov eax, %2
    35                              <1> 
    36                              <1>     %if 3 == %0
    37                              <1>         mov [edi + 4], %3               ; フラグ
    38                              <1>     %endif
    39                              <1> 
    40                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    41                              <1>         shr eax, 16
    42                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    43                              <1> 
    44                              <1>         pop edi
    45                              <1>         pop eax
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro outp 2
    49                              <1>     mov al, %2
    50                              <1>     out %1, al
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %define RING_ITEM_SIZE (1 << 4)
    54                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    55                              <1> 
    56                              <1> struc ring_buff
    57 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    58 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    59 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    60                              <1> endstruc
    61                              <1> 
    62                              <1> %macro set_desc 2-*
    63                              <1>         push eax
    64                              <1>         push edi
    65                              <1> 
    66                              <1>         mov edi, %1     ; ディスクリプタアドレス
    67                              <1>         mov eax, %2     ; ベースアドレス
    68                              <1> 
    69                              <1>     %if 3 == %0
    70                              <1>         mov [edi + 0], %3   ; リミット
    71                              <1>     %endif
    72                              <1> 
    73                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    74                              <1>         shr eax, 16
    75                              <1>         mov [edi + 4], al   ; ベース([23:16])
    76                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    77                              <1> 
    78                              <1>         pop edi
    79                              <1>         pop eax
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro set_gate 2-*
    83                              <1>     push eax
    84                              <1>     push edi
    85                              <1> 
    86                              <1>     mov edi, %1         ; ディスクリプタアドレス
    87                              <1>     mov eax, %2         ; ベースアドレス
    88                              <1> 
    89                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    90                              <1>     shr eax, 16
    91                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    92                              <1> 
    93                              <1>     pop edi
    94                              <1>     pop eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc rose
    98 00000000 ????????            <1>     .x0         resd 1      ; 左上座標
    99 00000004 ????????            <1>     .y0         resd 1      ; 
   100 00000008 ????????            <1>     .x1         resd 1      ; 右下座標
   101 0000000C ????????            <1>     .y1         resd 1      ;
   102                              <1> 
   103 00000010 ????????            <1>     .n          resd 1      ; 変数n
   104 00000014 ????????            <1>     .d          resd 1      ; 変数d
   105                              <1> 
   106                              <1>     ;描画色
   107 00000018 ????????            <1>     .color_x    resd 1      ; x軸
   108 0000001C ????????            <1>     .color_y    resd 1      ; y軸
   109 00000020 ????????            <1>     .color_z    resd 1      ; 枠
   110 00000024 ????????            <1>     .color_s    resd 1      ; 文字
   111 00000028 ????????            <1>     .color_f    resd 1      ; グラフ描画
   112 0000002C ????????            <1>     .color_b    resd 1      ; グラフ消去
   113                              <1> 
   114 00000030 <res 10h>           <1>     .title      resb 16     ; タイトル
   115                              <1> endstruc
     6                                  
     7                                      ORG KERNEL_LOAD
     8                                  
     9                                  [BITS 32]   ; 32bitコードを生成
    10                                  
    11                                  ; エントリポイント
    12                                  kernel:
    13                                      ; フォントアドレスを取得
    14 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    15 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    16 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    17 0000000C C1E004                      shl eax, 4
    18 0000000F 01D8                        add eax, ebx
    19 00000011 A3[F8020000]                mov [FONT_ADR], eax
    20                                  
    21                                      ; TSSディスクリプタの設定
    22                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    63 00000016 50                  <1>  push eax
    64 00000017 57                  <1>  push edi
    65                              <1> 
    66 00000018 BF[90030000]        <1>  mov edi, %1
    67 0000001D B8[D6030000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000022 66894702            <1>  mov [edi + 2], ax
    74 00000026 C1E810              <1>  shr eax, 16
    75 00000029 884704              <1>  mov [edi + 4], al
    76 0000002C 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000002F 5F                  <1>  pop edi
    79 00000030 58                  <1>  pop eax
    23                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    63 00000031 50                  <1>  push eax
    64 00000032 57                  <1>  push edi
    65                              <1> 
    66 00000033 BF[98030000]        <1>  mov edi, %1
    67 00000038 B8[AE040000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000003D 66894702            <1>  mov [edi + 2], ax
    74 00000041 C1E810              <1>  shr eax, 16
    75 00000044 884704              <1>  mov [edi + 4], al
    76 00000047 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000004A 5F                  <1>  pop edi
    79 0000004B 58                  <1>  pop eax
    24                                      set_desc GDT.tss_2, TSS_2       ; タスク2用TSSの設定
    63 0000004C 50                  <1>  push eax
    64 0000004D 57                  <1>  push edi
    65                              <1> 
    66 0000004E BF[A0030000]        <1>  mov edi, %1
    67 00000053 B8[86050000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000058 66894702            <1>  mov [edi + 2], ax
    74 0000005C C1E810              <1>  shr eax, 16
    75 0000005F 884704              <1>  mov [edi + 4], al
    76 00000062 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000065 5F                  <1>  pop edi
    79 00000066 58                  <1>  pop eax
    25                                      set_desc GDT.tss_3, TSS_3       ; タスク3用TSSの設定
    63 00000067 50                  <1>  push eax
    64 00000068 57                  <1>  push edi
    65                              <1> 
    66 00000069 BF[A8030000]        <1>  mov edi, %1
    67 0000006E B8[5E060000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000073 66894702            <1>  mov [edi + 2], ax
    74 00000077 C1E810              <1>  shr eax, 16
    75 0000007A 884704              <1>  mov [edi + 4], al
    76 0000007D 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000080 5F                  <1>  pop edi
    79 00000081 58                  <1>  pop eax
    26                                      set_desc GDT.tss_4, TSS_4       ; タスク4用TSSの設定
    63 00000082 50                  <1>  push eax
    64 00000083 57                  <1>  push edi
    65                              <1> 
    66 00000084 BF[B0030000]        <1>  mov edi, %1
    67 00000089 B8[36070000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000008E 66894702            <1>  mov [edi + 2], ax
    74 00000092 C1E810              <1>  shr eax, 16
    75 00000095 884704              <1>  mov [edi + 4], al
    76 00000098 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000009B 5F                  <1>  pop edi
    79 0000009C 58                  <1>  pop eax
    27                                      set_desc GDT.tss_5, TSS_5       ; タスク5用TSSの設定
    63 0000009D 50                  <1>  push eax
    64 0000009E 57                  <1>  push edi
    65                              <1> 
    66 0000009F BF[B8030000]        <1>  mov edi, %1
    67 000000A4 B8[0E080000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000A9 66894702            <1>  mov [edi + 2], ax
    74 000000AD C1E810              <1>  shr eax, 16
    75 000000B0 884704              <1>  mov [edi + 4], al
    76 000000B3 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000B6 5F                  <1>  pop edi
    79 000000B7 58                  <1>  pop eax
    28                                      set_desc GDT.tss_6, TSS_6       ; タスク6用TSSの設定
    63 000000B8 50                  <1>  push eax
    64 000000B9 57                  <1>  push edi
    65                              <1> 
    66 000000BA BF[C0030000]        <1>  mov edi, %1
    67 000000BF B8[E6080000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000C4 66894702            <1>  mov [edi + 2], ax
    74 000000C8 C1E810              <1>  shr eax, 16
    75 000000CB 884704              <1>  mov [edi + 4], al
    76 000000CE 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000D1 5F                  <1>  pop edi
    79 000000D2 58                  <1>  pop eax
    29                                  
    30                                      ; コールゲートの設定
    31                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    83 000000D3 50                  <1>  push eax
    84 000000D4 57                  <1>  push edi
    85                              <1> 
    86 000000D5 BF[C8030000]        <1>  mov edi, %1
    87 000000DA B8[E8170000]        <1>  mov eax, %2
    88                              <1> 
    89 000000DF 668907              <1>  mov [edi + 0], ax
    90 000000E2 C1E810              <1>  shr eax, 16
    91 000000E5 66894706            <1>  mov [edi + 6], ax
    92                              <1> 
    93 000000E9 5F                  <1>  pop edi
    94 000000EA 58                  <1>  pop eax
    32                                  
    33                                      ; LDTの設定
    34                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    63 000000EB 50                  <1>  push eax
    64 000000EC 57                  <1>  push edi
    65                              <1> 
    66 000000ED BF[88030000]        <1>  mov edi, %1
    67 000000F2 B8[00030000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000FC 66894702            <1>  mov [edi + 2], ax
    74 00000100 C1E810              <1>  shr eax, 16
    75 00000103 884704              <1>  mov [edi + 4], al
    76 00000106 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000109 5F                  <1>  pop edi
    79 0000010A 58                  <1>  pop eax
    35                                  
    36                                      ; GDTをロード(再設定)
    37 0000010B 0F0115[D0030000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    38                                  
    39                                      ; スタックの設定
    40 00000112 BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    41                                  
    42                                      ; タスクレジスタの初期化
    43 00000117 66B83000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    44 0000011B 0F00D8                      ltr ax              ; タスクレジスタの設定
    45                                  
    46                                      ; 初期化
    47 0000011E E8D3140000                  cdecl init_int                  ; 割り込みベクタの初期化
    48 00000123 E81D150000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    49 00000128 E817090000                  cdecl init_page                 ; ページングの初期化
    50                                  
    51                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    30 0000012D 50                  <1>  push eax
    31 0000012E 57                  <1>  push edi
    32                              <1> 
    33 0000012F BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000134 B8[27160000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000139 668907              <1>  mov [edi + 0], ax
    41 0000013C C1E810              <1>  shr eax, 16
    42 0000013F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000143 5F                  <1>  pop edi
    45 00000144 58                  <1>  pop eax
    52                                      set_vect 0x07, int_nm           ; 割り込み処理の登録：デバイス使用不可例外
    30 00000145 50                  <1>  push eax
    31 00000146 57                  <1>  push edi
    32                              <1> 
    33 00000147 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000014C B8[85180000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000151 668907              <1>  mov [edi + 0], ax
    41 00000154 C1E810              <1>  shr eax, 16
    42 00000157 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000015B 5F                  <1>  pop edi
    45 0000015C 58                  <1>  pop eax
    53                                      set_vect 0x0E, int_pf           ; 割り込み処理の登録：ページフォルト
    30 0000015D 50                  <1>  push eax
    31 0000015E 57                  <1>  push edi
    32                              <1> 
    33 0000015F BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000164 B8[210B0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000169 668907              <1>  mov [edi + 0], ax
    41 0000016C C1E810              <1>  shr eax, 16
    42 0000016F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000173 5F                  <1>  pop edi
    45 00000174 58                  <1>  pop eax
    54                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    30 00000175 50                  <1>  push eax
    31 00000176 57                  <1>  push edi
    32                              <1> 
    33 00000177 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000017C B8[BE090000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000181 668907              <1>  mov [edi + 0], ax
    41 00000184 C1E810              <1>  shr eax, 16
    42 00000187 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000018B 5F                  <1>  pop edi
    45 0000018C 58                  <1>  pop eax
    55                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    30 0000018D 50                  <1>  push eax
    31 0000018E 57                  <1>  push edi
    32                              <1> 
    33 0000018F BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000194 B8[AD160000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000199 668907              <1>  mov [edi + 0], ax
    41 0000019C C1E810              <1>  shr eax, 16
    42 0000019F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001A3 5F                  <1>  pop edi
    45 000001A4 58                  <1>  pop eax
    56                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    30 000001A5 50                  <1>  push eax
    31 000001A6 57                  <1>  push edi
    32                              <1> 
    33 000001A7 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001AC B8[70160000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001B1 668907              <1>  mov [edi + 0], ax
    41 000001B4 C1E810              <1>  shr eax, 16
    42 000001B7 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001BB 5F                  <1>  pop edi
    45 000001BC 58                  <1>  pop eax
    57                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    30 000001BD 50                  <1>  push eax
    31 000001BE 57                  <1>  push edi
    32                              <1> 
    33 000001BF BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001C4 B8[18180000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 000001C9 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001CF 668907              <1>  mov [edi + 0], ax
    41 000001D2 C1E810              <1>  shr eax, 16
    42 000001D5 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001D9 5F                  <1>  pop edi
    45 000001DA 58                  <1>  pop eax
    58                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    30 000001DB 50                  <1>  push eax
    31 000001DC 57                  <1>  push edi
    32                              <1> 
    33 000001DD BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001E2 B8[26180000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 000001E7 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001ED 668907              <1>  mov [edi + 0], ax
    41 000001F0 C1E810              <1>  shr eax, 16
    42 000001F3 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001F7 5F                  <1>  pop edi
    45 000001F8 58                  <1>  pop eax
    59                                  
    60                                      ; デバイスの割り込み許可
    61 000001F9 6A10E8991400006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    61 00000202 C404               
    62 00000204 E897150000                  cdecl int_en_timer0             ; タイマー割り込み許可
    63                                  
    64                                      ; IMR（割り込みマスクレジスタ）の設定
    65                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    49 00000209 B0F8                <1>  mov al, %2
    50 0000020B E621                <1>  out %1, al
    66                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    49 0000020D B0FE                <1>  mov al, %2
    50 0000020F E6A1                <1>  out %1, al
    67                                  
    68                                      ; ページングの有効化
    69 00000211 B800501000                  mov eax, CR3_BASE
    70 00000216 0F22D8                      mov cr3, eax                    ; ページテーブルの登録
    71                                  
    72 00000219 0F20C0                      mov eax, cr0
    73 0000021C 0D00000080                  or eax, (1 << 31)               ; CR0 | PG      ページングを有効化
    74 00000221 0F22C0                      mov cr0, eax
    75 00000224 EB00                        jmp $ + 2                       ; パイプラインのクリア
    76                                  
    77 00000226 FB                          sti                             ; 割り込み許可
    78                                  
    79 00000227 6A0D6A3FE8480E0000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    79 00000230 6683C408           
    80 00000234 6A046A3FE8BC0E0000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    80 0000023D 6683C408           
    81 00000241 68[DE020000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    81 00000249 00006A0E6A19E8670E-
    81 00000252 00006683C410       
    82                                  
    83                                  
    84                                  
    85                                  .10L:
    86                                      ; 回転する棒の表示
    87 00000258 E852150000                  cdecl draw_rotation_bar
    88                                  
    89                                      ; キーコードの取得
    90 0000025D 68[F0020000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    90 00000263 [D4160000]E8801400-
    90 0000026B 006683C408         
    91 00000270 83F800                      cmp eax, 0
    92 00000273 7464                        je .10E
    93                                  
    94                                      ; キーコードの表示
    95 00000275 68[D4160000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    95 0000027D 02E8CA1400006683C4-
    95 00000286 0C                 
    96                                  
    97                                      ; キー押下時の処理
    98 00000287 A0[F0020000]                mov al, [.int_key]
    99 0000028C 3C02                        cmp al, 0x02
   100 0000028E 7522                        jne .12E
   101                                      ; ファイル読み込み
   102 00000290 FF15F09B0000                call [BOOT_LOAD + BOOT_SIZE - 16]   ; ファイル読み込み
   103                                  
   104                                      ; ファイルの内容を表示
   105 00000296 BE00780000                  mov esi, 0x7800
   106 0000029B C6462000                    mov [esi + 32], byte 0
   107 0000029F 5668040F00006A006A-         cdecl draw_str, 0, 0, 0x0F04, esi
   107 000002A8 00E80D0E00006683C4-
   107 000002B1 10                 
   108                                  .12E:
   109                                  
   110                                      ; CTRL+ALT+ENDキー
   111 000002B2 A0[F0020000]                mov al, [.int_key]
   112 000002B7 50E8671800006683C4-         cdecl ctrl_alt_end, eax
   112 000002C0 04                 
   113 000002C1 83F800                      cmp eax, 0
   114 000002C4 7413                        je .14E
   115                                  
   116 000002C6 B800000000                  mov eax, 0
   117 000002CB 0FAB05[F4020000]            bts [.once], eax
   118 000002D2 7205                        jc .14E
   119 000002D4 E8D7160000                  cdecl power_off     ; 1度だけ呼び出す
   120                                  .14E:
   121                                  
   122                                  .10E:
   123 000002D9 E97AFFFFFF                  jmp .10L
   124                                  
   125 000002DE 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
   125 000002E7 65726E656C212000   
   126                                  
   127 000002EF 00                      ALIGN 4,    db 0
   128 000002F0 00000000                .int_key:   dd 0
   129 000002F4 00000000                .once:      dd 0
   130                                  
   131                                  ALIGN 4, db 0
   132 000002F8 00000000                FONT_ADR: dd 0
   133 000002FC 00000000                RTC_TIME: dd 0
   134                                  
   135                                  ; タスク
   136                                  %include "descriptor.s"
   137                              <1> ; ローカルディスクリプタテーブル
   138 00000300 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   139 00000308 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   140 00000310 FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   141 00000318 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   142 00000320 FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   143 00000328 FFFF000000FACF00    <1> .cs_task_2: dq 0x00CFFA000000FFFF   ; CODE 4G
   144 00000330 FFFF000000F2CF00    <1> .ds_task_2: dq 0x00CFF2000000FFFF   ; DATA 4G
   145 00000338 FFFF000000FACF00    <1> .cs_task_3: dq 0x00CFFA000000FFFF   ; CODE 4G
   146 00000340 FFFF000000F2CF00    <1> .ds_task_3: dq 0x00CFF2000000FFFF   ; DATA 4G
   147 00000348 FFFF000000F2CF00    <1> .ds_task_4: dq 0x00CFF2000000FFFF   ; DATA 4G
   148 00000350 FFFF000000F2CF00    <1> .ds_task_5: dq 0x00CFF2000000FFFF   ; DATA 4G
   149 00000358 FFFF000000F2CF00    <1> .ds_task_6: dq 0x00CFF2000000FFFF   ; DATA 4G
   150                              <1> .end:
   151                              <1> 
   152                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   153                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   154                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   155                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   156                              <1> CS_TASK_2 equ (.cs_task_2 - LDT) | 4 | 3; タスク2用CSセレクタ
   157                              <1> DS_TASK_2 equ (.ds_task_2 - LDT) | 4 | 3; タスク2用DSセレクタ
   158                              <1> CS_TASK_3 equ (.cs_task_3 - LDT) | 4 | 3; タスク3用CSセレクタ
   159                              <1> DS_TASK_3 equ (.ds_task_3 - LDT) | 4 | 3; タスク3用DSセレクタ
   160                              <1> DS_TASK_4 equ (.ds_task_4 - LDT) | 4 | 3; タスク4用DSセレクタ
   161                              <1> DS_TASK_5 equ (.ds_task_5 - LDT) | 4 | 3; タスク5用DSセレクタ
   162                              <1> DS_TASK_6 equ (.ds_task_6 - LDT) | 4 | 3; タスク6用DSセレクタ
   163                              <1> 
   164                              <1> LDT_LIMIT equ .end        - LDT - 1
   165                              <1> 
   166                              <1> ; グローバルディスクリプタテーブル
   167 00000360 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   168 00000368 FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   169 00000370 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   170 00000378 FFFF0000009A0F00    <1> .cs_bit16:  dq 0x000F9A000000FFFF   ; コードセグメント（16ビットセグメント）
   171 00000380 FFFF000000920F00    <1> .ds_bit16:  dq 0x000F92000000FFFF   ; データセグメント（16ビットセグメント）
   172 00000388 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   173 00000390 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   174 00000398 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   175 000003A0 6700000000890000    <1> .tss_2:     dq 0x0000890000000067   ; TSSディスクリプタ
   176 000003A8 6700000000890000    <1> .tss_3:     dq 0x0000890000000067   ; TSS_3ディスクリプタ
   177 000003B0 6700000000890000    <1> .tss_4:     dq 0x0000890000000067   ; TSS_4ディスクリプタ
   178 000003B8 6700000000890000    <1> .tss_5:     dq 0x0000890000000067   ; TSS_5ディスクリプタ
   179 000003C0 6700000000890000    <1> .tss_6:     dq 0x0000890000000067   ; TSS_6ディスクリプタ
   180 000003C8 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   181                              <1> .end:
   182                              <1> 
   183                              <1> CS_KERNEL equ .cs_kernel - GDT
   184                              <1> DS_KERNEL equ .ds_kernel - GDT
   185                              <1> SS_LDT    equ .ldt       - GDT
   186                              <1> SS_TASK_0 equ .tss_0     - GDT
   187                              <1> SS_TASK_1 equ .tss_1     - GDT
   188                              <1> SS_TASK_2 equ .tss_2     - GDT
   189                              <1> SS_TASK_3 equ .tss_3     - GDT
   190                              <1> SS_TASK_4 equ .tss_4     - GDT
   191                              <1> SS_TASK_5 equ .tss_5     - GDT
   192                              <1> SS_TASK_6 equ .tss_6     - GDT
   193                              <1> SS_GATE_0 equ .call_gate - GDT
   194                              <1> 
   195 000003D0 6F00                <1> GDTR: dw GDT.end - GDT - 1
   196 000003D2 [60030000]          <1>       dd GDT
   197                              <1> 
   198                              <1> ; TSS
   199                              <1> TSS_0:
   200 000003D6 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   201 000003DA 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   202 000003DE 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   203 000003E2 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   204 000003E6 00000000            <1> .ss1:       dd 0                    ;* 16:
   205 000003EA 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   206 000003EE 00000000            <1> .ss2:       dd 0                    ;* 24:
   207 000003F2 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   208 000003F6 00000000            <1> .eip:       dd 0                    ;  32:EIP
   209 000003FA 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   210 000003FE 00000000            <1> .eax:       dd 0                    ;  40:EAX
   211 00000402 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   212 00000406 00000000            <1> .edx:       dd 0                    ;  48:EDX
   213 0000040A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   214 0000040E 00000000            <1> .esp:       dd 0                    ;  56:ESP
   215 00000412 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   216 00000416 00000000            <1> .esi:       dd 0                    ;  64:ESI
   217 0000041A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   218 0000041E 00000000            <1> .es:        dd 0                    ;  72:ES
   219 00000422 00000000            <1> .cs:        dd 0                    ;  76:CS
   220 00000426 00000000            <1> .ss:        dd 0                    ;  80:SS
   221 0000042A 00000000            <1> .ds:        dd 0                    ;  84:DS
   222 0000042E 00000000            <1> .fs:        dd 0                    ;  88:FS
   223 00000432 00000000            <1> .gs:        dd 0                    ;  92:GS
   224 00000436 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   225 0000043A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   226 0000043E 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   227                              <1> 
   228                              <1> TSS_1:
   229 000004AE 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   230 000004B2 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   231 000004B6 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   232 000004BA 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   233 000004BE 00000000            <1> .ss1:       dd 0                    ;* 16:
   234 000004C2 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   235 000004C6 00000000            <1> .ss2:       dd 0                    ;* 24:
   236 000004CA 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   237 000004CE [8F0B0000]          <1> .eip:       dd task_1               ;  32:EIP
   238 000004D2 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   239 000004D6 00000000            <1> .eax:       dd 0                    ;  40:EAX
   240 000004DA 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   241 000004DE 00000000            <1> .edx:       dd 0                    ;  48:EDX
   242 000004E2 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   243 000004E6 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   244 000004EA 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   245 000004EE 00000000            <1> .esi:       dd 0                    ;  64:ESI
   246 000004F2 00000000            <1> .edi:       dd 0                    ;  68:EDI
   247 000004F6 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   248 000004FA 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   249 000004FE 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   250 00000502 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   251 00000506 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   252 0000050A 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   253 0000050E 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   254 00000512 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   255 00000516 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   256                              <1> 
   257                              <1> TSS_2:
   258 00000586 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   259 0000058A 003A1000            <1> .esp0:      dd SP_TASK_2 - 512      ;*  4:ESP0
   260 0000058E 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   261 00000592 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   262 00000596 00000000            <1> .ss1:       dd 0                    ;* 16:
   263 0000059A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   264 0000059E 00000000            <1> .ss2:       dd 0                    ;* 24:
   265 000005A2 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   266 000005A6 [C40B0000]          <1> .eip:       dd task_2               ;  32:EIP
   267 000005AA 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   268 000005AE 00000000            <1> .eax:       dd 0                    ;  40:EAX
   269 000005B2 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   270 000005B6 00000000            <1> .edx:       dd 0                    ;  48:EDX
   271 000005BA 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   272 000005BE 003C1000            <1> .esp:       dd SP_TASK_2            ;  56:ESP
   273 000005C2 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   274 000005C6 00000000            <1> .esi:       dd 0                    ;  64:ESI
   275 000005CA 00000000            <1> .edi:       dd 0                    ;  68:EDI
   276 000005CE 37000000            <1> .es:        dd DS_TASK_2            ;  72:ES
   277 000005D2 2F000000            <1> .cs:        dd CS_TASK_2            ;  76:CS
   278 000005D6 37000000            <1> .ss:        dd DS_TASK_2            ;  80:SS
   279 000005DA 37000000            <1> .ds:        dd DS_TASK_2            ;  84:DS
   280 000005DE 37000000            <1> .fs:        dd DS_TASK_2            ;  88:FS
   281 000005E2 37000000            <1> .gs:        dd DS_TASK_2            ;  92:GS
   282 000005E6 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   283 000005EA 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   284 000005EE 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   285                              <1> 
   286                              <1> TSS_3:
   287 0000065E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   288 00000662 003E1000            <1> .esp0:      dd SP_TASK_3 - 512      ;*  4:ESP0
   289 00000666 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   290 0000066A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   291 0000066E 00000000            <1> .ss1:       dd 0                    ;* 16:
   292 00000672 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   293 00000676 00000000            <1> .ss2:       dd 0                    ;* 24:
   294 0000067A 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   295 0000067E [980C0000]          <1> .eip:       dd task_3               ;  32:EIP
   296 00000682 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   297 00000686 00000000            <1> .eax:       dd 0                    ;  40:EAX
   298 0000068A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   299 0000068E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   300 00000692 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   301 00000696 00401000            <1> .esp:       dd SP_TASK_3            ;  56:ESP
   302 0000069A 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   303 0000069E 00000000            <1> .esi:       dd 0                    ;  64:ESI
   304 000006A2 00000000            <1> .edi:       dd 0                    ;  68:EDI
   305 000006A6 47000000            <1> .es:        dd DS_TASK_3            ;  72:ES
   306 000006AA 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   307 000006AE 47000000            <1> .ss:        dd DS_TASK_3            ;  80:SS
   308 000006B2 47000000            <1> .ds:        dd DS_TASK_3            ;  84:DS
   309 000006B6 47000000            <1> .fs:        dd DS_TASK_3            ;  88:FS
   310 000006BA 47000000            <1> .gs:        dd DS_TASK_3            ;  92:GS
   311 000006BE 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   312 000006C2 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   313 000006C6 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   314                              <1> 
   315                              <1> TSS_4:
   316 00000736 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   317 0000073A 00421000            <1> .esp0:      dd SP_TASK_4 - 512      ;*  4:ESP0
   318 0000073E 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   319 00000742 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   320 00000746 00000000            <1> .ss1:       dd 0                    ;* 16:
   321 0000074A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   322 0000074E 00000000            <1> .ss2:       dd 0                    ;* 24:
   323 00000752 00002000            <1> .cr3:       dd CR3_TASK_4           ;  28:CR3(PDBR)
   324 00000756 [980C0000]          <1> .eip:       dd task_3               ;  32:EIP
   325 0000075A 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   326 0000075E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   327 00000762 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   328 00000766 00000000            <1> .edx:       dd 0                    ;  48:EDX
   329 0000076A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   330 0000076E 00441000            <1> .esp:       dd SP_TASK_4            ;  56:ESP
   331 00000772 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   332 00000776 00000000            <1> .esi:       dd 0                    ;  64:ESI
   333 0000077A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   334 0000077E 4F000000            <1> .es:        dd DS_TASK_4            ;  72:ES
   335 00000782 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   336 00000786 4F000000            <1> .ss:        dd DS_TASK_4            ;  80:SS
   337 0000078A 4F000000            <1> .ds:        dd DS_TASK_4            ;  84:DS
   338 0000078E 4F000000            <1> .fs:        dd DS_TASK_4            ;  88:FS
   339 00000792 4F000000            <1> .gs:        dd DS_TASK_4            ;  92:GS
   340 00000796 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   341 0000079A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   342 0000079E 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   343                              <1> 
   344                              <1> TSS_5:
   345 0000080E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   346 00000812 00461000            <1> .esp0:      dd SP_TASK_5 - 512      ;*  4:ESP0
   347 00000816 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   348 0000081A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   349 0000081E 00000000            <1> .ss1:       dd 0                    ;* 16:
   350 00000822 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   351 00000826 00000000            <1> .ss2:       dd 0                    ;* 24:
   352 0000082A 00202000            <1> .cr3:       dd CR3_TASK_5           ;  28:CR3(PDBR)
   353 0000082E [980C0000]          <1> .eip:       dd task_3               ;  32:EIP
   354 00000832 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   355 00000836 00000000            <1> .eax:       dd 0                    ;  40:EAX
   356 0000083A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   357 0000083E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   358 00000842 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   359 00000846 00481000            <1> .esp:       dd SP_TASK_5            ;  56:ESP
   360 0000084A 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   361 0000084E 00000000            <1> .esi:       dd 0                    ;  64:ESI
   362 00000852 00000000            <1> .edi:       dd 0                    ;  68:EDI
   363 00000856 57000000            <1> .es:        dd DS_TASK_5            ;  72:ES
   364 0000085A 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   365 0000085E 57000000            <1> .ss:        dd DS_TASK_5            ;  80:SS
   366 00000862 57000000            <1> .ds:        dd DS_TASK_5            ;  84:DS
   367 00000866 57000000            <1> .fs:        dd DS_TASK_5            ;  88:FS
   368 0000086A 57000000            <1> .gs:        dd DS_TASK_5            ;  92:GS
   369 0000086E 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   370 00000872 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   371 00000876 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   372                              <1> 
   373                              <1> TSS_6:
   374 000008E6 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   375 000008EA 004A1000            <1> .esp0:      dd SP_TASK_6 - 512      ;*  4:ESP0
   376 000008EE 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   377 000008F2 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   378 000008F6 00000000            <1> .ss1:       dd 0                    ;* 16:
   379 000008FA 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   380 000008FE 00000000            <1> .ss2:       dd 0                    ;* 24:
   381 00000902 00402000            <1> .cr3:       dd CR3_TASK_6           ;  28:CR3(PDBR)
   382 00000906 [980C0000]          <1> .eip:       dd task_3               ;  32:EIP
   383 0000090A 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   384 0000090E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   385 00000912 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   386 00000916 00000000            <1> .edx:       dd 0                    ;  48:EDX
   387 0000091A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   388 0000091E 004C1000            <1> .esp:       dd SP_TASK_6            ;  56:ESP
   389 00000922 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   390 00000926 00000000            <1> .esi:       dd 0                    ;  64:ESI
   391 0000092A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   392 0000092E 5F000000            <1> .es:        dd DS_TASK_6            ;  72:ES
   393 00000932 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   394 00000936 5F000000            <1> .ss:        dd DS_TASK_6            ;  80:SS
   395 0000093A 5F000000            <1> .ds:        dd DS_TASK_6            ;  84:DS
   396 0000093E 5F000000            <1> .fs:        dd DS_TASK_6            ;  88:FS
   397 00000942 5F000000            <1> .gs:        dd DS_TASK_6            ;  92:GS
   398 00000946 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   399 0000094A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   400 0000094E 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   137                                  %include "modules/int_timer.s"
   138                              <1> int_timer:
   139 000009BE 60                  <1>     pushad
   140 000009BF 1E                  <1>     push ds
   141 000009C0 06                  <1>     push es
   142                              <1> 
   143                              <1>     ; データ用セグメントの設定
   144 000009C1 66B81000            <1>     mov ax, 0x0010
   145 000009C5 8ED8                <1>     mov ds, ax
   146 000009C7 8EC0                <1>     mov es, ax
   147                              <1> 
   148                              <1>     ; TICK
   149 000009C9 FF05[400A0000]      <1>     inc dword [TIMER_COUNT]
   150                              <1> 
   151                              <1>     ; 割り込みフラグをクリア(EOI)
   152                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    49 000009CF B020                <2>  mov al, %2
    50 000009D1 E620                <2>  out %1, al
   153                              <1> 
   154                              <1>     ; タスクの切り替え(task0 -> task1 -> task2 -> task0 -> ...)
   155 000009D3 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   156 000009D7 6683F830            <1>     cmp ax, SS_TASK_0   ; switch(ax)
   157 000009DB 7427                <1>     je .11L
   158 000009DD 6683F838            <1>     cmp ax, SS_TASK_1
   159 000009E1 742A                <1>     je .12L
   160 000009E3 6683F840            <1>     cmp ax, SS_TASK_2
   161 000009E7 742D                <1>     je .13L
   162 000009E9 6683F848            <1>     cmp ax, SS_TASK_3
   163 000009ED 7430                <1>     je .14L
   164 000009EF 6683F850            <1>     cmp ax, SS_TASK_4
   165 000009F3 7433                <1>     je .15L
   166 000009F5 6683F858            <1>     cmp ax, SS_TASK_5
   167 000009F9 7436                <1>     je .16L
   168                              <1> 
   169 000009FB EA000000003000      <1>     jmp SS_TASK_0:0     ; default:
   170 00000A02 EB36                <1>     jmp .10E
   171                              <1> .11L:                   ; case SS_TASK_0:
   172 00000A04 EA000000003800      <1>     jmp SS_TASK_1:0     ; タスク1に切り替え
   173 00000A0B EB2D                <1>     jmp .10E
   174                              <1> .12L:                   ; case SS_TASK_1:
   175 00000A0D EA000000004000      <1>     jmp SS_TASK_2:0     ; タスク2に切り替え
   176 00000A14 EB24                <1>     jmp .10E
   177                              <1> .13L:                   ; case SS_TASK_2:
   178 00000A16 EA000000004800      <1>     jmp SS_TASK_3:0     ; タスク3に切り替え
   179 00000A1D EB1B                <1>     jmp .10E
   180                              <1> .14L:                   ; case SS_TASK_3:
   181 00000A1F EA000000005000      <1>     jmp SS_TASK_4:0     ; タスク4に切り替え
   182 00000A26 EB12                <1>     jmp .10E
   183                              <1> .15L:                   ; case SS_TASK_4:
   184 00000A28 EA000000005800      <1>     jmp SS_TASK_5:0     ; タスク5に切り替え
   185 00000A2F EB09                <1>     jmp .10E
   186                              <1> .16L:                   ; case SS_TASK_5:
   187 00000A31 EA000000006000      <1>     jmp SS_TASK_6:0     ; タスク6に切り替え
   188 00000A38 EB00                <1>     jmp .10E
   189                              <1> .10E:
   190                              <1> 
   191 00000A3A 07                  <1>     pop es
   192 00000A3B 1F                  <1>     pop ds
   193 00000A3C 61                  <1>     popad
   194                              <1> 
   195 00000A3D CF                  <1>     iret
   196                              <1> 
   197 00000A3E 00<rep 2h>          <1> ALIGN 4, db 0
   198 00000A40 00000000            <1> TIMER_COUNT: dd 0
   199                              <1> 
   138                                  %include "modules/paging.s"
   139                              <1> init_page:
   140 00000A44 60                  <1>     pusha
   141                              <1> 
   142 00000A45 6800501000E8970000- <1>     cdecl page_set_4m, CR3_BASE     ; ページ変換テーブルの作成 タスク3用
   142 00000A4E 006683C404          <1>
   143 00000A53 6800002000E8890000- <1>     cdecl page_set_4m, CR3_TASK_4   ; ページ変換テーブルの作成 タスク4用
   143 00000A5C 006683C404          <1>
   144 00000A61 6800202000E87B0000- <1>     cdecl page_set_4m, CR3_TASK_5   ; ページ変換テーブルの作成 タスク5用
   144 00000A6A 006683C404          <1>
   145 00000A6F 6800402000E86D0000- <1>     cdecl page_set_4m, CR3_TASK_6   ; ページ変換テーブルの作成 タスク5用
   145 00000A78 006683C404          <1>
   146 00000A7D C7051C641000000000- <1>     mov [0x0010_6000 + 0x107 * 4], dword 0   ; 0x0010_7000をページ不在に設定
   146 00000A86 00                  <1>
   147                              <1> 
   148                              <1>     ; アドレス変換設定
   149 00000A87 C7051C142000078010- <1>     mov [0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7   ; タスク4用
   149 00000A90 00                  <1>
   150 00000A91 C7051C342000079010- <1>     mov [0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7   ; タスク5用
   150 00000A9A 00                  <1>
   151 00000A9B C7051C54200007A010- <1>     mov [0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7   ; タスク6用
   151 00000AA4 00                  <1>
   152                              <1> 
   153                              <1>     ; 描画パラメータの設定
   154 00000AA5 6A4068[D80D0000]68- <1>     cdecl memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size    ; タスク4用
   154 00000AAD 00801000E8480E0000- <1>
   154 00000AB6 6683C40C            <1>
   155 00000ABA 6A4068[180E0000]68- <1>     cdecl memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size    ; タスク5用
   155 00000AC2 00901000E8330E0000- <1>
   155 00000ACB 6683C40C            <1>
   156 00000ACF 6A4068[580E0000]68- <1>     cdecl memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size    ; タスク6用
   156 00000AD7 00A01000E81E0E0000- <1>
   156 00000AE0 6683C40C            <1>
   157                              <1> 
   158 00000AE4 61                  <1>     popa
   159                              <1> 
   160 00000AE5 C3                  <1>     ret
   161                              <1> 
   162                              <1> 
   163                              <1> page_set_4m:
   164 00000AE6 55                  <1>     push ebp
   165 00000AE7 89E5                <1>     mov ebp, esp
   166                              <1> 
   167 00000AE9 60                  <1>     pusha
   168                              <1> 
   169                              <1>     ; ページディレクトリの作成
   170 00000AEA FC                  <1>     cld                     ; dfをクリア (+方向)
   171 00000AEB 8B7D08              <1>     mov edi, [ebp + 8]      ; EDI = ページディレクトリの先頭
   172 00000AEE B800000000          <1>     mov eax, 0x00000000     ; EAX = 0   P = 0
   173 00000AF3 B900040000          <1>     mov ecx, 1024           ; count = 1024
   174 00000AF8 F3AB                <1>     rep stosd               ; while(ecx--) *(edi++) = eax;
   175                              <1> 
   176                              <1>     ; 先頭のエントリを設定
   177 00000AFA 89F8                <1>     mov eax, edi            ; ページディレクトリの直後
   178 00000AFC 2500F0FFFF          <1>     and eax, ~0x0000_0FFF   ; 物理アドレスの指定
   179 00000B01 83C807              <1>     or eax, 7               ; U/S R/W Pの許可
   180 00000B04 898700F0FFFF        <1>     mov [edi - (1024 * 4)], eax ; 先頭のエントリを設定
   181                              <1> 
   182                              <1>     ; ページングテーブルの設定(リニア)
   183 00000B0A B807000000          <1>     mov eax, 0x00000007     ; 物理アドレスの指定とU/S R/W Pの許可
   184 00000B0F B900040000          <1>     mov ecx, 1024           ; count = 1024
   185                              <1> .10L:                       ; do {
   186 00000B14 AB                  <1>     stosd                   ;   *(edi++) = eax
   187 00000B15 0500100000          <1>     add eax, 0x00001000     ;   eax += 0x1000
   188 00000B1A E2F8                <1>     loop .10L               ; } while(--count)
   189                              <1> 
   190 00000B1C 61                  <1>     popa
   191                              <1> 
   192 00000B1D 89EC                <1>     mov esp, ebp
   193 00000B1F 5D                  <1>     pop ebp
   194                              <1> 
   195 00000B20 C3                  <1>     ret
   139                                  %include "modules/int_pf.s"
   140                              <1> int_pf:
   141 00000B21 55                  <1>     push ebp
   142 00000B22 89E5                <1>     mov ebp, esp
   143                              <1> 
   144 00000B24 60                  <1>     pusha
   145 00000B25 1E                  <1>     push ds
   146 00000B26 06                  <1>     push es
   147                              <1> 
   148                              <1>     ; データ用セグメントセレクタの設定
   149 00000B27 66B81000            <1>     mov ax, 0x0010
   150 00000B2B 8ED8                <1>     mov ds, ax
   151 00000B2D 8EC0                <1>     mov es, ax
   152                              <1> 
   153                              <1>     ; 例外を生成したアドレスの確認
   154 00000B2F 0F20D0              <1>     mov eax, cr2            ; ページフォルトの際アクセスしようとしたアドレス
   155 00000B32 2500F0FFFF          <1>     and eax, ~0x0FFF        ; 4KB 以内のアクセス
   156 00000B37 3D00701000          <1>     cmp eax, 0x0010_7000    ; if(アクセスしようとしたアドレス!=0x0010_7000) goto .10F
   157 00000B3C 7521                <1>     jne .10F
   158                              <1> 
   159 00000B3E C7051C641000077010- <1>     mov [0x00106000 + 0x107 * 4], dword 0x00107007  ; ページの有効化
   159 00000B47 00                  <1>
   160 00000B48 6A4068[980D0000]68- <1>     cdecl memcpy, 0x0010_7000, DRAW_PARAM, rose_size; 描画パラメータのコピー
   160 00000B50 00701000E8A50D0000- <1>
   160 00000B59 6683C40C            <1>
   161 00000B5D EB15                <1>     jmp .10E
   162                              <1> 
   163                              <1> .10F:
   164                              <1>     ; スタックの調整
   165 00000B5F 83C404              <1>     add esp, 4      ; pop es
   166 00000B62 83C404              <1>     add esp, 4      ; pop ds
   167 00000B65 61                  <1>     popa
   168 00000B66 5D                  <1>     pop ebp
   169                              <1> 
   170                              <1>     ; タスク終了処理
   171 00000B67 9C                  <1>     pushf           ; EFLAGS
   172 00000B68 0E                  <1>     push cs         ; CS
   173 00000B69 68[B9140000]        <1>     push int_stop   ; スタック表示処理
   174                              <1> 
   175 00000B6E B8[7E0B0000]        <1>     mov eax, .s0    ; 割り込み種別
   176 00000B73 CF                  <1>     iret
   177                              <1> 
   178                              <1> .10E:
   179                              <1> 
   180 00000B74 07                  <1>     pop es
   181 00000B75 1F                  <1>     pop ds
   182 00000B76 61                  <1>     popa
   183                              <1> 
   184 00000B77 89EC                <1>     mov esp, ebp
   185 00000B79 5D                  <1>     pop ebp
   186                              <1> 
   187 00000B7A 83C404              <1>     add esp, 4  ; エラーコードの破棄
   188 00000B7D CF                  <1>     iret
   189                              <1> 
   190 00000B7E 203C20504147452046- <1> .s0 db " < PAGE FAULT > ", 0
   190 00000B87 41554C54203E2000    <1>
   140                                  %include "tasks/task_1.s"
   141                              <1> task_1:
   142                              <1>     ; 文字列の表示(コールゲート)
   143                              <1>     ;cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   144 00000B8F 68[BD0B0000]6A076A- <1>     cdecl draw_str, 63, 0, 0x07, .s0 ; draw_str();
   144 00000B97 006A3FE81C05000066- <1>
   144 00000BA0 83C410              <1>
   145                              <1> 
   146                              <1> .10L:
   147                              <1>     ; 時刻の表示
   148 00000BA3 A1[FC020000]        <1>     mov eax, [RTC_TIME]
   149 00000BA8 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   149 00000BB1 48E8770800006683C4- <1>
   149 00000BBA 10                  <1>
   150                              <1> 
   151 00000BBB EBE6                <1>     jmp .10L
   152                              <1> 
   153                              <1>     ; データ
   154 00000BBD 5461736B2D3100      <1> .s0 db "Task-1", 0
   141                                  %include "tasks/task_2.s"
   142                              <1> task_2:
   143 00000BC4 68[8A0C0000]6A076A- <1>     cdecl draw_str, 63, 1, 0x07, .s0
   143 00000BCC 016A3FE8E704000066- <1>
   143 00000BD5 83C410              <1>
   144                              <1> 
   145 00000BD8 DB05[780C0000]      <1>     fild dword [.c1000]     ; st0 = [.c1000]
   146 00000BDE D9EB                <1>     fldpi           ; st0 = pi
   147 00000BE0 DA35[7C0C0000]      <1>     fidiv dword [.c180]     ; st0 /= [.c180]
   148 00000BE6 D9EB                <1>     fldpi
   149 00000BE8 DCC0                <1>     fadd st0, st0   ; st0 += st0
   150 00000BEA D9EE                <1>     fldz            ; st0 = 0
   151                              <1>     ; st0   0
   152                              <1>     ; st1   2*pi
   153                              <1>     ; st2   pi/180
   154                              <1>     ; st3   1000
   155                              <1> 
   156                              <1> .10L:
   157 00000BEC D8C2                <1>     fadd st0, st2   ; st0 += st2
   158 00000BEE D9F8                <1>     fprem           ; st0 %= st1
   159 00000BF0 D9C0                <1>     fld st0         ; st0をコピー
   160 00000BF2 D9FE                <1>     fsin            ; st0 = sin(st0)
   161 00000BF4 D8CC                <1>     fmul st0, st4   ; st0 *= 1000
   162 00000BF6 DF35[800C0000]      <1>     fbstp [.bcd]
   163                              <1> 
   164 00000BFC A1[800C0000]        <1>     mov eax, [.bcd]
   165 00000C01 89C3                <1>     mov ebx, eax
   166                              <1> 
   167 00000C03 250F0F0000          <1>     and eax, 0x0F0F ; 上位４ビットをマスク
   168 00000C08 0D30300000          <1>     or eax, 0x3030  ; 上位４ビットに0x3に設定
   169                              <1> 
   170 00000C0D C1EB04              <1>     shr ebx, 4
   171 00000C10 81E30F0F0000        <1>     and ebx, 0x0F0F ; 上位４ビットをマスク
   172 00000C16 81CB30300000        <1>     or ebx, 0x3030  ; 上位４ビットに0x3に設定
   173                              <1> 
   174 00000C1C 883D[920C0000]      <1>     mov [.s2 + 0], bh   ; 1桁目
   175 00000C22 8825[940C0000]      <1>     mov [.s3 + 0], ah   ; 小数1桁目
   176 00000C28 881D[950C0000]      <1>     mov [.s3 + 1], bl   ; 小数2桁目
   177 00000C2E A2[960C0000]        <1>     mov [.s3 + 2], al   ; 小数3桁目
   178                              <1> 
   179 00000C33 B807000000          <1>     mov eax, 7
   180 00000C38 0FA305[890C0000]    <1>     bt [.bcd + 9], eax  ; cf = .bcd+9 から7ビット目
   181 00000C3F 7209                <1>     jc .10F
   182                              <1> 
   183 00000C41 C605[910C0000]2B    <1>     mov [.s1 + 0], byte '+'
   184 00000C48 EB07                <1>     jmp .10E
   185                              <1> .10F:
   186 00000C4A C605[910C0000]2D    <1>     mov [.s1 + 0], byte '-'
   187                              <1> .10E:
   188                              <1> 
   189 00000C51 68[910C0000]6A076A- <1>     cdecl draw_str, 72, 1, 0x07, .s1
   189 00000C59 016A48E85A04000066- <1>
   189 00000C62 83C410              <1>
   190                              <1> 
   191                              <1>     ; ウェイト
   192 00000C65 6A14E8740C00006683- <1>     cdecl wait_tick, 20
   192 00000C6E C404                <1>
   193                              <1> 
   194 00000C70 E977FFFFFF          <1>     jmp .10L
   195                              <1> 
   196                              <1> 
   197 00000C75 00<rep 3h>          <1> ALIGN 4, db 0
   198 00000C78 E8030000            <1> .c1000: dd 1000
   199 00000C7C B4000000            <1> .c180:  dd 180
   200 00000C80 00<rep Ah>          <1> .bcd: times 10 db 0x00
   201 00000C8A 5461736B2D3200      <1> .s0     db "Task-2", 0
   202 00000C91 2D                  <1> .s1:    db "-"
   203 00000C92 302E                <1> .s2:    db "0."
   204 00000C94 30303000            <1> .s3:    db "000", 0
   142                                  %include "tasks/task_3.s"
   143                              <1> task_3:
   144 00000C98 89E5                <1>     mov ebp, esp
   145                              <1> 
   146 00000C9A 6A00                <1>     push dword 0    ; x0    x座標原点
   147 00000C9C 6A00                <1>     push dword 0    ; y0    y座標原点
   148 00000C9E 6A00                <1>     push dword 0    ; x     x座標描画
   149 00000CA0 6A00                <1>     push dword 0    ; y     y座標描画
   150 00000CA2 6A00                <1>     push dword 0    ; r     角度
   151                              <1> 
   152                              <1>     ; 初期化
   153                              <1>     ;mov esi, DRAW_PARAM ; esi = 描画パラメータ
   154 00000CA4 BE00701000          <1>     mov esi, 0x0010_7000
   155                              <1> 
   156                              <1>     ; タイトル表示
   157 00000CA9 8B06                <1>     mov eax, [esi + rose.x0]
   158 00000CAB 8B5E04              <1>     mov ebx, [esi + rose.y0]
   159                              <1> 
   160 00000CAE C1E803              <1>     shr eax, 3                      ; EAX = EAX /  8 x座標を文字位置に変換
   161 00000CB1 C1EB04              <1>     shr ebx, 4                      ; EBX = EBX / 16 y座標を文字位置に変換
   162 00000CB4 4B                  <1>     dec ebx                         ; 1文字分上に移動
   163 00000CB5 8B4E24              <1>     mov ecx, [esi + rose.color_s]   ; 文字色
   164 00000CB8 8D5630              <1>     lea edx, [esi + rose.title]     ; タイトル
   165                              <1> 
   166 00000CBB 52515350E8F7030000- <1>     cdecl draw_str, eax, ebx, ecx, edx
   166 00000CC4 6683C410            <1>
   167                              <1> 
   168                              <1>     ; X軸の中点
   169 00000CC8 8B06                <1>     mov eax, [esi + rose.x0]
   170 00000CCA 8B5E08              <1>     mov ebx, [esi + rose.x1]
   171 00000CCD 29C3                <1>     sub ebx, eax            ; ebx = x0 - x1
   172 00000CCF D1EB                <1>     shr ebx, 1              ; ebx /= 1
   173 00000CD1 01C3                <1>     add ebx, eax            ; ebx += x0
   174 00000CD3 895DFC              <1>     mov [ebp - 4], ebx      ; x0 = 原点
   175                              <1> 
   176                              <1>     ; Y軸の中点
   177 00000CD6 8B4604              <1>     mov eax, [esi + rose.y0]
   178 00000CD9 8B5E0C              <1>     mov ebx, [esi + rose.y1]
   179 00000CDC 29C3                <1>     sub ebx, eax            ; ebx = y0 - y1
   180 00000CDE D1EB                <1>     shr ebx, 1              ; ebx /= 1
   181 00000CE0 01C3                <1>     add ebx, eax            ; ebx += y0
   182 00000CE2 895DF8              <1>     mov [ebp - 8], ebx      ; y0 = 原点
   183                              <1> 
   184                              <1>     ; X軸の描画
   185 00000CE5 8B06                <1>     mov eax, [esi + rose.x0]
   186 00000CE7 8B5DF8              <1>     mov ebx, [ebp - 8]
   187 00000CEA 8B4E08              <1>     mov ecx, [esi + rose.x1]
   188                              <1> 
   189 00000CED FF761853515350E855- <1>     cdecl draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   189 00000CF6 0500006683C414      <1>
   190                              <1> 
   191                              <1>     ; Y軸の描画
   192 00000CFD 8B4604              <1>     mov eax, [esi + rose.y0]
   193 00000D00 8B5DFC              <1>     mov ebx, [ebp - 4]
   194 00000D03 8B4E0C              <1>     mov ecx, [esi + rose.y1]
   195                              <1> 
   196 00000D06 FF761C51535053E83C- <1>     cdecl draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   196 00000D0F 0500006683C414      <1>
   197                              <1> 
   198                              <1>     ; 枠の描画
   199 00000D16 8B06                <1>     mov eax, [esi + rose.x0]
   200 00000D18 8B5E04              <1>     mov ebx, [esi + rose.y0]
   201 00000D1B 8B4E08              <1>     mov ecx, [esi + rose.x1]
   202 00000D1E 8B560C              <1>     mov edx, [esi + rose.y1]
   203                              <1> 
   204 00000D21 FF762052515350E8D0- <1>     cdecl draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   204 00000D2A 0500006683C414      <1>
   205                              <1> 
   206                              <1>     ; 振幅をX軸の約95%とする
   207 00000D31 8B4608              <1>     mov eax, [esi + rose.x1]
   208 00000D34 2B06                <1>     sub eax, [esi + rose.x0]
   209 00000D36 D1E8                <1>     shr eax, 1                  ; eax = 原点から右端の長さ
   210 00000D38 89C3                <1>     mov ebx, eax
   211 00000D3A C1EB04              <1>     shr ebx, 4
   212 00000D3D 29D8                <1>     sub eax, ebx
   213                              <1> 
   214                              <1>     ; FPUの初期化（バラ曲線の初期化）
   215 00000D3F FF7614FF761050E84D- <1>     cdecl fpu_rose_init            , eax            , dword [esi + rose.n]            , dword [esi + rose.d]
   215 00000D48 0100006683C40C      <1>
   219                              <1> 
   220                              <1>     ; メインループ
   221                              <1> .10L:
   222                              <1>     ; 座標計算
   223 00000D4F 8D5DF4              <1>     lea ebx, [ebp -12]  ; EBX = &x;
   224 00000D52 8D4DF0              <1>     lea ecx, [ebp -16]  ; ECX = &y;
   225 00000D55 8B45EC              <1>     mov eax, [ebp -20]  ; EAX = r;
   226                              <1> 
   227 00000D58 505153E85201000066- <1>     cdecl fpu_rose_update            , ebx            , ecx            , eax
   227 00000D61 83C40C              <1>
   231                              <1> 
   232                              <1>     ; 角度更新(r = r % 36000)
   233 00000D64 BA00000000          <1>     mov edx, 0
   234 00000D69 40                  <1>     inc eax
   235 00000D6A BBA08C0000          <1>     mov ebx, 360 * 100
   236 00000D6F F7F3                <1>     div ebx             ; EDX = EDX:EAX % EBX
   237 00000D71 8955EC              <1>     mov [ebp -20], edx
   238                              <1> 
   239                              <1>     ; ドット描画
   240 00000D74 8B4DF4              <1>     mov ecx, [ebp -12]  ; x座標
   241 00000D77 8B55F0              <1>     mov edx, [ebp -16]  ; y座標
   242                              <1> 
   243 00000D7A 034DFC              <1>     add ecx, [ebp - 4]  ; x座標原点
   244 00000D7D 0355F8              <1>     add edx, [ebp - 8]  ; y座標原点
   245                              <1> 
   246 00000D80 8B5E28              <1>     mov ebx, [esi + rose.color_f]   ; 表示色
   247 00000D83 CD82                <1>     int 0x82            ; sys_call_82(表示色, X, Y)
   248                              <1> 
   249                              <1>     ; ウェイト
   250 00000D85 6A02E8540B00006683- <1>     cdecl wait_tick, 2
   250 00000D8E C404                <1>
   251                              <1> 
   252                              <1>     ; ドット描画(消去)
   253 00000D90 8B5E2C              <1>     mov ebx, [esi + rose.color_b]   ; 背景色
   254 00000D93 CD82                <1>     int 0x82           ; sys_call_82(表示色, X, Y)
   255                              <1> 
   256 00000D95 EBB8                <1>     jmp .10L
   257                              <1> 
   258                              <1> 
   259 00000D97 00                  <1> ALIGN 4, db 0
   260                              <1> DRAW_PARAM:
   261                              <1> .t3:
   262                              <1>     istruc rose
   263 00000D98 20000000            <1>         at rose.x0,         dd  32
   264 00000D9C 20000000            <1>         at rose.y0,         dd  32
   265 00000DA0 D0000000            <1>         at rose.x1,         dd 208
   266 00000DA4 D0000000            <1>         at rose.y1,         dd 208
   267                              <1> 
   268 00000DA8 02000000            <1>         at rose.n,          dd 2
   269 00000DAC 01000000            <1>         at rose.d,          dd 1
   270                              <1> 
   271 00000DB0 07000000            <1>         at rose.color_x,    dd 0x007
   272 00000DB4 07000000            <1>         at rose.color_y,    dd 0x007
   273 00000DB8 0F000000            <1>         at rose.color_z,    dd 0x00F
   274 00000DBC 0F030000            <1>         at rose.color_s,    dd 0x30F
   275 00000DC0 0F000000            <1>         at rose.color_f,    dd 0x00F
   276 00000DC4 03000000            <1>         at rose.color_b,    dd 0x003
   277                              <1> 
   278 00000DC8 5461736B2D3300      <1>         at rose.title,      db "Task-3", 0
   279 00000DCF 00<rep 9h>          <1>     iend
   280                              <1> .t4:
   281                              <1>     istruc rose
   282 00000DD8 F8000000            <1>         at rose.x0,         dd 248
   283 00000DDC 20000000            <1>         at rose.y0,         dd  32
   284 00000DE0 A8010000            <1>         at rose.x1,         dd 424
   285 00000DE4 D0000000            <1>         at rose.y1,         dd 208
   286                              <1> 
   287 00000DE8 03000000            <1>         at rose.n,          dd 3
   288 00000DEC 01000000            <1>         at rose.d,          dd 1
   289                              <1> 
   290 00000DF0 07000000            <1>         at rose.color_x,    dd 0x007
   291 00000DF4 07000000            <1>         at rose.color_y,    dd 0x007
   292 00000DF8 0F000000            <1>         at rose.color_z,    dd 0x00F
   293 00000DFC 0F030000            <1>         at rose.color_s,    dd 0x30F
   294 00000E00 0F000000            <1>         at rose.color_f,    dd 0x00F
   295 00000E04 04000000            <1>         at rose.color_b,    dd 0x004
   296                              <1> 
   297 00000E08 5461736B2D3400      <1>         at rose.title,      db "Task-4", 0
   298 00000E0F 00<rep 9h>          <1>     iend
   299                              <1> .t5:
   300                              <1>     istruc rose
   301 00000E18 20000000            <1>         at rose.x0,         dd  32
   302 00000E1C 10010000            <1>         at rose.y0,         dd 272
   303 00000E20 D0000000            <1>         at rose.x1,         dd 208
   304 00000E24 C0010000            <1>         at rose.y1,         dd 448
   305                              <1> 
   306 00000E28 02000000            <1>         at rose.n,          dd 2
   307 00000E2C 06000000            <1>         at rose.d,          dd 6
   308                              <1> 
   309 00000E30 07000000            <1>         at rose.color_x,    dd 0x007
   310 00000E34 07000000            <1>         at rose.color_y,    dd 0x007
   311 00000E38 0F000000            <1>         at rose.color_z,    dd 0x00F
   312 00000E3C 0F030000            <1>         at rose.color_s,    dd 0x30F
   313 00000E40 0F000000            <1>         at rose.color_f,    dd 0x00F
   314 00000E44 05000000            <1>         at rose.color_b,    dd 0x005
   315                              <1> 
   316 00000E48 5461736B2D3500      <1>         at rose.title,      db "Task-5", 0
   317 00000E4F 00<rep 9h>          <1>     iend
   318                              <1> .t6:
   319                              <1>     istruc rose
   320 00000E58 F8000000            <1>         at rose.x0,         dd 248
   321 00000E5C 10010000            <1>         at rose.y0,         dd 272
   322 00000E60 A8010000            <1>         at rose.x1,         dd 424
   323 00000E64 C0010000            <1>         at rose.y1,         dd 448
   324                              <1> 
   325 00000E68 04000000            <1>         at rose.n,          dd 4
   326 00000E6C 06000000            <1>         at rose.d,          dd 6
   327                              <1> 
   328 00000E70 07000000            <1>         at rose.color_x,    dd 0x007
   329 00000E74 07000000            <1>         at rose.color_y,    dd 0x007
   330 00000E78 0F000000            <1>         at rose.color_z,    dd 0x00F
   331 00000E7C 0F030000            <1>         at rose.color_s,    dd 0x30F
   332 00000E80 0F000000            <1>         at rose.color_f,    dd 0x00F
   333 00000E84 06000000            <1>         at rose.color_b,    dd 0x006
   334                              <1> 
   335 00000E88 5461736B2D3600      <1>         at rose.title,      db "Task-6", 0
   336 00000E8F 00<rep 9h>          <1>     iend
   337                              <1> 
   338                              <1> fpu_rose_init:
   339 00000E98 55                  <1>     push ebp
   340 00000E99 89E5                <1>     mov ebp, esp
   341                              <1> 
   342 00000E9B 68B4000000          <1>     push dword 180
   343                              <1> 
   344 00000EA0 D9EB                <1>     fldpi
   345 00000EA2 DA75FC              <1>     fidiv dword [ebp - 4]   ; 180
   346 00000EA5 DB450C              <1>     fild  dword [ebp +12]   ; n
   347 00000EA8 DA7510              <1>     fidiv dword [ebp +16]   ; d
   348 00000EAB DB4508              <1>     fild  dword [ebp + 8]   ; A
   349                              <1> 
   350 00000EAE 89EC                <1>     mov esp, ebp
   351 00000EB0 5D                  <1>     pop ebp
   352                              <1> 
   353 00000EB1 C3                  <1>     ret
   354                              <1> 
   355                              <1> fpu_rose_update:
   356                              <1> ; px: 計算したX座標を格納するアドレス
   357                              <1> ; py: 計算したY座標を格納するアドレス
   358                              <1> ; t:  角度
   359                              <1> 
   360 00000EB2 55                  <1>     push ebp
   361 00000EB3 89E5                <1>     mov ebp, esp
   362                              <1> 
   363 00000EB5 50                  <1>     push eax
   364 00000EB6 53                  <1>     push ebx
   365                              <1> 
   366 00000EB7 8B4508              <1>     mov eax, [ebp +  8] ; eax = px
   367 00000EBA 8B5D0C              <1>     mov ebx, [ebp + 12] ; ebx = py
   368                              <1> 
   369 00000EBD DB4510              <1>     fild dword [ebp +16]    ; t
   370 00000EC0 D8CB                <1>     fmul st0, st3           ; st0 = t * r = θ
   371 00000EC2 D9C0                <1>     fld st0
   372                              <1> 
   373 00000EC4 D9FB                <1>     fsincos                 ; st0 = cos(st0)
   374                              <1>                             ; st1 = sin(st0)
   375                              <1>     
   376 00000EC6 D9CA                <1>     fxch st2                ; st0 <-> st2
   377 00000EC8 D8CC                <1>     fmul st0, st4           ; st0 = kθ
   378 00000ECA D9FE                <1>     fsin                    ; st0 = sin(kθ)
   379 00000ECC D8CB                <1>     fmul st0, st3           ; st0 = Asin(kθ)
   380                              <1> 
   381                              <1>     ; st0 = Asin(kθ)
   382                              <1>     ; st1 = sin(θ)
   383                              <1>     ; st2 = cos(θ)
   384                              <1>     ; st3 = A
   385                              <1>     ; st4 = k
   386                              <1>     ; st5 = r
   387                              <1> 
   388 00000ECE D9CA                <1>     fxch st2                ; cosをst0に
   389 00000ED0 D8CA                <1>     fmul st0, st2           ; st0 *= Asin(kθ)
   390 00000ED2 DB18                <1>     fistp dword [eax]       ; st0を[eax]にpop
   391                              <1> 
   392 00000ED4 DEC9                <1>     fmulp st1, st0          ; st1 *= st0; st0をpop
   393 00000ED6 D9E0                <1>     fchs                    ; st0 * (-1)
   394 00000ED8 DB1B                <1>     fistp dword [ebx]       ; st0を[ebx]にpop
   395                              <1> 
   396 00000EDA 5B                  <1>     pop ebx
   397 00000EDB 58                  <1>     pop eax
   398 00000EDC 89EC                <1>     mov esp, ebp
   399 00000EDE 5D                  <1>     pop ebp
   400                              <1> 
   401 00000EDF C3                  <1>     ret
   143                                  
   144                                  ; モジュール
   145                                  %include "../modules/protect/vga.s"
   146                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   147                              <1> ; plane: 読み込みプレーン
   148 00000EE0 55                  <1>     push ebp
   149 00000EE1 89E5                <1>     mov ebp, esp
   150                              <1> 
   151 00000EE3 50                  <1>     push eax
   152 00000EE4 52                  <1>     push edx
   153                              <1> 
   154                              <1> 
   155                              <1>     ; 読み込みプレーンの選択
   156 00000EE5 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   157 00000EE8 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   158 00000EEB B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   159 00000EED 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   160 00000EF1 66EF                <1>     out dx, ax
   161                              <1> 
   162 00000EF3 5A                  <1>     pop edx
   163 00000EF4 58                  <1>     pop eax
   164                              <1> 
   165 00000EF5 89EC                <1>     mov esp, ebp
   166 00000EF7 5D                  <1>     pop ebp
   167                              <1> 
   168 00000EF8 C3                  <1>     ret
   169                              <1> 
   170                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   171                              <1> ; plane 書き込みプレーン
   172 00000EF9 55                  <1>     push ebp
   173 00000EFA 89E5                <1>     mov ebp, esp
   174                              <1> 
   175 00000EFC 6650                <1>     push ax
   176 00000EFE 6652                <1>     push dx
   177                              <1> 
   178                              <1> 
   179                              <1>     ; 書き込みプレーンの選択
   180 00000F00 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   181 00000F03 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   182 00000F06 B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   183 00000F08 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   184 00000F0C 66EF                <1>     out dx, ax
   185                              <1> 
   186                              <1> 
   187 00000F0E 665A                <1>     pop dx
   188 00000F10 6658                <1>     pop ax
   189                              <1> 
   190 00000F12 89EC                <1>     mov esp, ebp
   191 00000F14 5D                  <1>     pop ebp
   192                              <1> 
   193 00000F15 C3                  <1>     ret
   194                              <1> 
   195                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   196                              <1> ; font FONTアドレス
   197                              <1> ; vram VRAMアドレス
   198                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   199                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   200 00000F16 55                  <1>     push ebp
   201 00000F17 89E5                <1>     mov ebp, esp
   202                              <1>     
   203 00000F19 50                  <1>     push eax
   204 00000F1A 53                  <1>     push ebx
   205 00000F1B 51                  <1>     push ecx
   206 00000F1C 52                  <1>     push edx
   207 00000F1D 57                  <1>     push edi
   208 00000F1E 56                  <1>     push esi
   209                              <1> 
   210 00000F1F 8B7508              <1>     mov esi, [ebp + 8]          ; font
   211 00000F22 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   212 00000F25 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   213 00000F29 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   214                              <1>     ; bh = 背景色 bl = 前景色
   215                              <1> 
   216 00000F2D 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   217 00000F2F 0F94C6              <1>     setz dh         ; dh = zf
   218 00000F32 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   219                              <1> 
   220 00000F34 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   221 00000F36 0F94C2              <1>     setz dl         ; dl = zf
   222 00000F39 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   223                              <1> 
   224                              <1>     ; 16ドットフォントのコピー
   225 00000F3B FC                  <1>     cld             ; アドレス加算モード
   226                              <1> 
   227 00000F3C B910000000          <1>     mov ecx, 16
   228                              <1> .10L:
   229                              <1>     ; フォントマスクの作成
   230 00000F41 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   231 00000F42 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   232 00000F44 F6D4                <1>     not ah
   233                              <1> 
   234                              <1>     ; 前景色
   235 00000F46 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   236                              <1> 
   237                              <1>     ; 背景色
   238 00000F48 F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   239 00000F4E 7404                <1>     jz .11F
   240                              <1>     ; 透過on
   241 00000F50 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   242 00000F52 EB02                <1>     jmp .11E
   243                              <1> .11F:                   ; 透過off
   244 00000F54 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   245                              <1> .11E:
   246                              <1>     
   247                              <1>     ; 前景色と背景色を合成
   248 00000F56 08E0                <1>     or al, ah           ; al = 背景 | 前景
   249                              <1> 
   250                              <1>     ; 新しい値を出力
   251 00000F58 8807                <1>     mov [edi], al
   252                              <1> 
   253 00000F5A 83C750              <1>     add edi, 80      ; 1行すすめる
   254 00000F5D E2E2                <1>     loop .10L
   255                              <1> .10E:
   256                              <1> 
   257 00000F5F 5E                  <1>     pop esi
   258 00000F60 5F                  <1>     pop edi
   259 00000F61 5A                  <1>     pop edx
   260 00000F62 59                  <1>     pop ecx
   261 00000F63 5B                  <1>     pop ebx
   262 00000F64 58                  <1>     pop eax
   263                              <1> 
   264 00000F65 89EC                <1>     mov esp, ebp
   265 00000F67 5D                  <1>     pop ebp
   266                              <1> 
   267 00000F68 C3                  <1>     ret
   268                              <1> 
   269                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   270                              <1> ; bitデータ
   271                              <1> ; vram VRAMアドレス
   272                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   273                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   274 00000F69 55                  <1>     push ebp
   275 00000F6A 89E5                <1>     mov ebp, esp
   276                              <1>     
   277 00000F6C 50                  <1>     push eax
   278 00000F6D 53                  <1>     push ebx
   279 00000F6E 57                  <1>     push edi
   280                              <1> 
   281 00000F6F 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   282 00000F72 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   283 00000F76 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   284                              <1>     ; bl = 前景色
   285                              <1> 
   286                              <1>     ; 常に透過モード
   287 00000F7A 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   288 00000F7C 0F94C3              <1>     setz bl         ; dl = zf
   289 00000F7F FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   290                              <1> 
   291                              <1>     ; マスク
   292 00000F81 8A4508              <1>     mov al, [ebp + 8]   ; bit
   293 00000F84 88C4                <1>     mov ah, al      ; ah ~= al
   294 00000F86 F6D4                <1>     not ah
   295                              <1> 
   296 00000F88 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   297 00000F8A 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   298 00000F8C 08E0                <1>     or al, ah           ; 背景と前景を合成
   299 00000F8E 8807                <1>     mov [edi], al       ; プレーンに書き込み
   300                              <1>     
   301                              <1> 
   302 00000F90 5F                  <1>     pop edi
   303 00000F91 5B                  <1>     pop ebx
   304 00000F92 58                  <1>     pop eax
   305                              <1> 
   306 00000F93 89EC                <1>     mov esp, ebp
   307 00000F95 5D                  <1>     pop ebp
   308                              <1> 
   309 00000F96 C3                  <1>     ret
   146                                  %include "../modules/protect/draw_char.s"
   147                              <1> GLOBAL _draw_char
   148                              <1> _draw_char:
   149                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   150                              <1> ; col 列（0～79）
   151                              <1> ; row 行（0～29）
   152                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   153                              <1> ; ch 文字
   154                              <1> 
   155 00000F97 55                  <1>     push ebp
   156 00000F98 89E5                <1>     mov ebp, esp
   157                              <1> 
   158 00000F9A 50                  <1>     push eax
   159 00000F9B 53                  <1>     push ebx
   160 00000F9C 51                  <1>     push ecx
   161 00000F9D 52                  <1>     push edx
   162 00000F9E 56                  <1>     push esi
   163 00000F9F 57                  <1>     push edi
   164                              <1> 
   165                              <1> %ifdef USE_TEST_AND_SET
   166 00000FA0 68[74100000]E88908- <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   166 00000FA8 00006683C404        <1>
   167                              <1> %endif
   168                              <1> 
   169                              <1>     ; コピー元フォントアドレスを設定
   170 00000FAE 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   171 00000FB2 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   172 00000FB5 0335[F8020000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   173                              <1> 
   174                              <1>     ; コピー先アドレスを取得
   175                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   176                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   177 00000FBB 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   178 00000FBE C1E708              <1>     shl edi, 8
   179 00000FC1 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   180 00000FC8 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   181                              <1> 
   182                              <1>     ; 1文字分のフォントを出力
   183 00000FCB 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   184                              <1> 
   185                              <1>     ; 輝度I
   186 00000FCF 6A03E80AFFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   186 00000FD8 C404                <1>
   187 00000FDA 6A08E818FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   187 00000FE3 C404                <1>
   188 00000FE5 536A085756E827FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   188 00000FEE FF6683C410          <1>
   189                              <1> 
   190                              <1>     ; 赤R
   191 00000FF3 6A02E8E6FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   191 00000FFC C404                <1>
   192 00000FFE 6A04E8F4FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   192 00001007 C404                <1>
   193 00001009 536A045756E803FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   193 00001012 FF6683C410          <1>
   194                              <1> 
   195                              <1>     ; 緑G
   196 00001017 6A01E8C2FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   196 00001020 C404                <1>
   197 00001022 6A02E8D0FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   197 0000102B C404                <1>
   198 0000102D 536A025756E8DFFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   198 00001036 FF6683C410          <1>
   199                              <1> 
   200                              <1>     ; 青B
   201 0000103B 6A00E89EFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   201 00001044 C404                <1>
   202 00001046 6A01E8ACFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   202 0000104F C404                <1>
   203 00001051 536A015756E8BBFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   203 0000105A FF6683C410          <1>
   204                              <1> 
   205                              <1> %ifdef USE_TEST_AND_SET
   206 0000105F C705[74100000]0000- <1>     mov [IN_USE], dword 0   ; 変数のクリア
   206 00001067 0000                <1>
   207                              <1> %endif
   208                              <1> 
   209 00001069 5F                  <1> 	pop		edi
   210 0000106A 5E                  <1> 	pop		esi
   211 0000106B 5A                  <1> 	pop		edx
   212 0000106C 59                  <1> 	pop		ecx
   213 0000106D 5B                  <1> 	pop		ebx
   214 0000106E 58                  <1> 	pop		eax
   215                              <1> 
   216 0000106F 89EC                <1>     mov esp, ebp
   217 00001071 5D                  <1>     pop ebp
   218                              <1> 
   219 00001072 C3                  <1>     ret
   220                              <1> 
   221                              <1> %ifdef USE_TEST_AND_SET
   222 00001073 00                  <1> ALIGN 4, db 0
   223 00001074 00000000            <1> IN_USE:  dd 0
   224                              <1> %endif
   147                                  %include "../modules/protect/draw_font.s"
   148                              <1> draw_font:  ; void draw_font(col, row);
   149                              <1> ; col 列
   150                              <1> ; row 行
   151 00001078 55                  <1>     push ebp
   152 00001079 89E5                <1>     mov ebp, esp
   153                              <1> 
   154 0000107B 50                  <1>     push eax
   155 0000107C 53                  <1>     push ebx
   156 0000107D 51                  <1>     push ecx
   157 0000107E 57                  <1>     push edi
   158 0000107F 56                  <1>     push esi
   159                              <1> 
   160                              <1> 
   161 00001080 8B7508              <1>     mov esi, [ebp + 8]  ; x
   162 00001083 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   163                              <1> 
   164 00001086 B900000000          <1>     mov ecx, 0
   165                              <1> .10L:
   166 0000108B 81F900010000        <1>     cmp ecx, 256
   167 00001091 731F                <1>     jae .10E
   168                              <1> 
   169 00001093 89C8                <1>     mov eax, ecx
   170 00001095 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   171 00001098 01F0                <1>     add eax, esi    ; eax += x
   172                              <1> 
   173 0000109A 89CB                <1>     mov ebx, ecx
   174 0000109C C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   175 0000109F 01FB                <1>     add ebx, edi    ; ebx += y
   176                              <1> 
   177 000010A1 516A075350E8ECFEFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   177 000010AA FF6683C410          <1>
   178                              <1> 
   179 000010AF 41                  <1>     inc ecx
   180 000010B0 EBD9                <1>     jmp .10L
   181                              <1> .10E:
   182                              <1> 
   183 000010B2 5E                  <1>     pop esi
   184 000010B3 5F                  <1>     pop edi
   185 000010B4 59                  <1>     pop ecx
   186 000010B5 5B                  <1>     pop ebx
   187 000010B6 58                  <1>     pop eax
   188                              <1> 
   189 000010B7 89EC                <1>     mov esp, ebp
   190 000010B9 5D                  <1>     pop ebp
   191                              <1> 
   192 000010BA C3                  <1>     ret
   148                                  %include "../modules/protect/draw_str.s"
   149                              <1> GLOBAL _draw_str
   150                              <1> _draw_str:
   151                              <1> draw_str:   ;void draw_str(col, row, color, p);
   152                              <1> ; col: 列
   153                              <1> ; row: 行
   154                              <1> ; color: 描画色
   155                              <1> ; p: 文字列のアドレス
   156 000010BB 55                  <1>     push ebp
   157 000010BC 89E5                <1>     mov ebp, esp
   158                              <1> 
   159 000010BE 50                  <1>     push eax
   160 000010BF 53                  <1>     push ebx
   161 000010C0 51                  <1>     push ecx
   162 000010C1 52                  <1>     push edx
   163 000010C2 56                  <1>     push esi
   164                              <1> 
   165                              <1> 
   166 000010C3 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   167 000010C6 8B550C              <1>     mov edx, [ebp +12]  ; row
   168 000010C9 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   169 000010CD 8B7514              <1>     mov esi, [ebp +20]  ; p
   170                              <1> 
   171 000010D0 FC                  <1>     cld
   172                              <1> .10L:
   173 000010D1 AC                  <1>     lodsb
   174 000010D2 3C00                <1>     cmp al, 0
   175 000010D4 741A                <1>     je .10E
   176                              <1> 
   177                              <1> %ifdef USE_SYSTEM_CALL
   178 000010D6 CD81                <1>     int 0x81
   179                              <1> %else
   180                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   181                              <1> %endif
   182                              <1> 
   183 000010D8 41                  <1>     inc ecx
   184 000010D9 83F950              <1>     cmp ecx, 80
   185 000010DC 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   186 000010DE B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   187 000010E3 42                  <1>     inc edx
   188 000010E4 83FA1E              <1>     cmp edx, 30
   189 000010E7 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   190 000010E9 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   191                              <1> .12E:
   192 000010EE EBE1                <1>     jmp .10L
   193                              <1> .10E:
   194                              <1> 
   195 000010F0 5E                  <1>     pop esi
   196 000010F1 5A                  <1>     pop edx
   197 000010F2 59                  <1>     pop ecx
   198 000010F3 5B                  <1>     pop ebx
   199 000010F4 58                  <1>     pop eax
   200                              <1> 
   201 000010F5 89EC                <1>     mov esp, ebp
   202 000010F7 5D                  <1>     pop ebp
   203                              <1> 
   204 000010F8 C3                  <1>     ret
   149                                  %include "../modules/protect/draw_color_bar.s"
   150                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   151                              <1> ; col: 列
   152                              <1> ; row: 行
   153 000010F9 55                  <1>     push ebp
   154 000010FA 89E5                <1>     mov ebp, esp
   155                              <1> 
   156 000010FC 50                  <1>     push eax
   157 000010FD 53                  <1>     push ebx
   158 000010FE 51                  <1>     push ecx
   159 000010FF 52                  <1>     push edx
   160 00001100 56                  <1>     push esi
   161 00001101 57                  <1>     push edi
   162                              <1> 
   163                              <1> 
   164 00001102 8B7508              <1>     mov esi, [ebp + 8]      ; x
   165 00001105 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   166                              <1> 
   167                              <1>     ; カラーバーを表示
   168 00001108 B900000000          <1>     mov ecx, 0
   169                              <1> .10L:
   170 0000110D 83F910              <1>     cmp ecx, 16
   171 00001110 732E                <1>     jae .10E
   172                              <1> 
   173                              <1>     ; 一回で8文字
   174 00001112 89C8                <1>     mov eax, ecx
   175 00001114 83E001              <1>     and eax, 0x01
   176 00001117 C1E003              <1>     shl eax, 3
   177 0000111A 01F0                <1>     add eax, esi    ; col
   178                              <1> 
   179                              <1>     ; 2回に1回改行
   180 0000111C 89CB                <1>     mov ebx, ecx
   181 0000111E D1EB                <1>     shr ebx, 1
   182 00001120 01FB                <1>     add ebx, edi    ; row
   183                              <1> 
   184                              <1>     ; 背景色を2色見たら下位次の行
   185 00001122 89CA                <1>     mov edx, ecx
   186 00001124 D1E2                <1>     shl edx, 1
   187 00001126 8B92[53110000]      <1>     mov edx, [.t0 + edx]    ; color
   188                              <1> 
   189 0000112C 68[4A110000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   189 00001134 E882FFFFFF6683C410  <1>
   190                              <1> 
   191 0000113D 41                  <1>     inc ecx
   192 0000113E EBCD                <1>     jmp .10L
   193                              <1> .10E:
   194                              <1> 
   195 00001140 5F                  <1>     pop edi
   196 00001141 5E                  <1>     pop esi
   197 00001142 5A                  <1>     pop edx
   198 00001143 59                  <1>     pop ecx
   199 00001144 5B                  <1>     pop ebx
   200 00001145 58                  <1>     pop eax
   201                              <1> 
   202 00001146 89EC                <1>     mov esp, ebp
   203 00001148 5D                  <1>     pop ebp
   204                              <1> 
   205 00001149 C3                  <1>     ret
   206                              <1> 
   207                              <1> 
   208 0000114A 202020202020202000  <1> .s0: db '        ', 0
   209                              <1> 
   210                              <1> .t0:
   211 00001153 00000008            <1>     dw 0x0000, 0x0800
   212 00001157 00010009            <1>     dw 0x0100, 0x0900
   213 0000115B 0002000A            <1>     dw 0x0200, 0x0A00
   214 0000115F 0003000B            <1>     dw 0x0300, 0x0B00
   215 00001163 0004000C            <1>     dw 0x0400, 0x0C00
   216 00001167 0005000D            <1>     dw 0x0500, 0x0D00
   217 0000116B 0006000E            <1>     dw 0x0600, 0x0E00
   218 0000116F 0007000F            <1>     dw 0x0700, 0x0F00
   150                                  %include "../modules/protect/draw_pixel.s"
   151                              <1> GLOBAL _draw_pixel
   152                              <1> _draw_pixel:
   153                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   154                              <1> ; x: X座標
   155                              <1> ; y: Y座標
   156                              <1> ; color: 描画色
   157 00001173 55                  <1>     push ebp
   158 00001174 89E5                <1>     mov ebp, esp
   159                              <1> 
   160 00001176 50                  <1>     push eax
   161 00001177 53                  <1>     push ebx
   162 00001178 51                  <1>     push ecx
   163 00001179 57                  <1>     push edi
   164                              <1> 
   165                              <1> 
   166                              <1> 
   167                              <1>     ; y座標*80->y*(640/8)
   168 0000117A 8B7D0C              <1>     mov edi, [ebp +12]
   169 0000117D C1E704              <1>     shl edi, 4
   170 00001180 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   171                              <1> 
   172                              <1>     ; x座標/8  8pixel単位の位置
   173 00001187 8B5D08              <1>     mov ebx, [ebp + 8]
   174 0000118A 89D9                <1>     mov ecx, ebx
   175 0000118C C1EB03              <1>     shr ebx, 3
   176 0000118F 01DF                <1>     add edi, ebx
   177                              <1> 
   178                              <1>     ; x座標を8で割った余りからビット位置を計算
   179                              <1>     ; 8pixel中の位置
   180                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   181 00001191 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   182 00001194 BB80000000          <1>     mov ebx, 0x80
   183 00001199 D3EB                <1>     shr ebx, cl
   184                              <1> 
   185 0000119B 8B4D10              <1>     mov ecx, [ebp +16]
   186                              <1> 
   187                              <1> %ifdef	USE_TEST_AND_SET
   188 0000119E 68[74100000]E88B06- <1> 	cdecl	test_and_set, IN_USE			    ; TEST_AND_SET(IN_USE); // リソースの空き待ち
   188 000011A6 00006683C404        <1>
   189                              <1> %endif
   190                              <1> 
   191                              <1>     ; プレーンごとに出力
   192 000011AC 6A03E82DFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   192 000011B5 C404                <1>
   193 000011B7 6A08E83BFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   193 000011C0 C404                <1>
   194 000011C2 516A085753E89DFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   194 000011CB FF6683C410          <1>
   195                              <1> 
   196 000011D0 6A02E809FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   196 000011D9 C404                <1>
   197 000011DB 6A04E817FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   197 000011E4 C404                <1>
   198 000011E6 516A045753E879FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   198 000011EF FF6683C410          <1>
   199                              <1> 
   200 000011F4 6A01E8E5FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   200 000011FD C404                <1>
   201 000011FF 6A02E8F3FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   201 00001208 C404                <1>
   202 0000120A 516A025753E855FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   202 00001213 FF6683C410          <1>
   203                              <1> 
   204 00001218 6A00E8C1FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   204 00001221 C404                <1>
   205 00001223 6A01E8CFFCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   205 0000122C C404                <1>
   206 0000122E 516A015753E831FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   206 00001237 FF6683C410          <1>
   207                              <1> 
   208                              <1> %ifdef	USE_TEST_AND_SET
   209 0000123C C705[74100000]0000- <1> 	mov		[IN_USE], dword 0				    ; 変数のクリア
   209 00001244 0000                <1>
   210                              <1> %endif
   211                              <1> 
   212 00001246 5F                  <1>     pop edi
   213 00001247 59                  <1>     pop ecx
   214 00001248 5B                  <1>     pop ebx
   215 00001249 58                  <1>     pop eax
   216                              <1> 
   217 0000124A 89EC                <1>     mov esp, ebp
   218 0000124C 5D                  <1>     pop ebp
   219                              <1> 
   220 0000124D C3                  <1>     ret
   151                                  %include "../modules/protect/draw_line.s"
   152                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   153                              <1> ; X0 始点のＸ座標
   154                              <1> ; Y0 始点のＹ座標
   155                              <1> ; X1 終点のX座標
   156                              <1> ; Y1 終点のY座標
   157                              <1> ; color 描画色
   158 0000124E 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   159 0000124F 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   160                              <1>                     ; ----------------
   161 00001251 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   162 00001253 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   163 00001255 6A00                <1>     push dword 0    ;    -12| dx    = 0
   164 00001257 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   165 00001259 6A00                <1>     push dword 0    ;    -20| y0    = 0
   166 0000125B 6A00                <1>     push dword 0    ;    -24| dy    = 0
   167 0000125D 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   168                              <1> 
   169 0000125F 50                  <1>     push eax        ;    -32| eax
   170 00001260 53                  <1>     push ebx        ;    -36| ebx
   171 00001261 51                  <1>     push ecx        ;    -40| ecx
   172 00001262 52                  <1>     push edx        ;    -44| edx
   173 00001263 56                  <1>     push esi        ;    -48| esi
   174 00001264 57                  <1>     push edi        ;    -52| edi
   175                              <1>     ; espはebp-52?
   176                              <1> 
   177                              <1>     ; x0とx1の距離を計算
   178 00001265 8B4508              <1>     mov eax, [ebp + 8]
   179 00001268 8B5D10              <1>     mov ebx, [ebp +16]
   180 0000126B 29C3                <1>     sub ebx, eax
   181 0000126D 7D09                <1>     jge .10F
   182                              <1> 
   183 0000126F F7DB                <1>     neg ebx
   184 00001271 BEFFFFFFFF          <1>     mov esi, -1
   185 00001276 EB05                <1>     jmp .10E
   186                              <1> .10F:
   187 00001278 BE01000000          <1>     mov esi, 1
   188                              <1> .10E:
   189                              <1>     
   190                              <1>     ; y0とy1の距離を計算
   191 0000127D 8B4D0C              <1>     mov ecx, [ebp +12]
   192 00001280 8B5514              <1>     mov edx, [ebp +20]
   193 00001283 29CA                <1>     sub edx, ecx
   194 00001285 7D09                <1>     jge .20F
   195                              <1> 
   196 00001287 F7DA                <1>     neg edx
   197 00001289 BFFFFFFFFF          <1>     mov edi, -1
   198 0000128E EB05                <1>     jmp .20E
   199                              <1> .20F:
   200 00001290 BF01000000          <1>     mov edi, 1
   201                              <1> .20E:
   202                              <1>     
   203                              <1>     ; x軸
   204 00001295 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   205 00001298 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   206 0000129B 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   207                              <1> 
   208                              <1>     ; y軸
   209 0000129E 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   210 000012A1 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   211 000012A4 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   212                              <1> 
   213                              <1> 
   214                              <1>     ; 基準軸を決める
   215 000012A7 39D3                <1>     cmp ebx, edx
   216 000012A9 7F08                <1>     jg .22F
   217                              <1>     
   218 000012AB 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   219 000012AE 8D7DF8              <1>     lea edi, [ebp - 8]
   220                              <1> 
   221 000012B1 EB06                <1>     jmp .22E
   222                              <1> .22F:
   223                              <1>     
   224 000012B3 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   225 000012B6 8D7DEC              <1>     lea edi, [ebp -20]
   226                              <1> .22E:
   227                              <1> 
   228                              <1> ; 基準軸 esi
   229                              <1> ; 相対軸 edi
   230                              <1> 
   231                              <1>     ; 繰り返し回数（基準軸のドット数）
   232 000012B9 8B4EFC              <1>     mov ecx, [esi - 4]
   233 000012BC 83F900              <1>     cmp ecx, 0
   234 000012BF 7505                <1>     jnz .30E
   235 000012C1 B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   236                              <1> .30E:
   237                              <1> 
   238                              <1>     ; 線を描画
   239                              <1> .50L:
   240                              <1> 
   241                              <1> %ifdef USE_SYSTEM_CALL
   242 000012C6 89C8                <1>     mov eax, ecx
   243 000012C8 8B4DF8              <1>     mov ecx, [ebp - 8]
   244 000012CB 8B55EC              <1>     mov edx, [ebp -20]
   245 000012CE 8B5D18              <1>     mov ebx, [ebp +24]
   246 000012D1 CD82                <1>     int 0x82            ; sys_call()
   247 000012D3 89C1                <1>     mov ecx, eax
   248                              <1> %else
   249                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   252                              <1> %endif
   253                              <1> 
   254                              <1>     ; 座標更新
   255                              <1> 
   256                              <1>     ; 基準軸の更新
   257 000012D5 8B46F8              <1>     mov eax, [esi - 8]
   258 000012D8 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   259                              <1> 
   260                              <1>     ; 相対軸の更新
   261 000012DA 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   262 000012DD 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   263                              <1> 
   264 000012E0 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   265                              <1> 
   266 000012E3 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   267 000012E5 7C07                <1>     jl .52E
   268 000012E7 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   269                              <1> 
   270 000012E9 8B5FF8              <1>     mov ebx, [edi - 8]
   271 000012EC 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   272                              <1> .52E:
   273                              <1>     
   274 000012EE 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   275                              <1> 
   276 000012F1 E2D3                <1>     loop .50L
   277                              <1> .50E:
   278                              <1> 
   279                              <1> 
   280 000012F3 5F                  <1>     pop edi
   281 000012F4 5E                  <1>     pop esi
   282 000012F5 5A                  <1>     pop edx
   283 000012F6 59                  <1>     pop ecx
   284 000012F7 5B                  <1>     pop ebx
   285 000012F8 58                  <1>     pop eax
   286                              <1> 
   287 000012F9 89EC                <1>     mov esp, ebp
   288 000012FB 5D                  <1>     pop ebp
   289                              <1> 
   290 000012FC C3                  <1>     ret
   152                                  %include "../modules/protect/draw_rect.s"
   153                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   154 000012FD 55                  <1>     push ebp
   155 000012FE 89E5                <1>     mov ebp, esp
   156                              <1>     
   157 00001300 50                  <1>     push eax
   158 00001301 53                  <1>     push ebx
   159 00001302 51                  <1>     push ecx
   160 00001303 52                  <1>     push edx
   161 00001304 56                  <1>     push esi
   162                              <1> 
   163 00001305 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   164 00001308 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   165 0000130B 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   166 0000130E 8B5514              <1>     mov edx, [ebp +20]  ; y1
   167 00001311 8B7518              <1>     mov esi, [ebp +24]  ; color
   168                              <1> 
   169                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   170 00001314 39C8                <1>     cmp eax, ecx
   171 00001316 7C01                <1>     jl .10E
   172 00001318 91                  <1>     xchg eax, ecx
   173                              <1> .10E:
   174 00001319 39D3                <1>     cmp ebx, edx
   175 0000131B 7C02                <1>     jl .20E
   176 0000131D 87DA                <1>     xchg ebx, edx
   177                              <1> .20E:
   178                              <1> 
   179                              <1>     ; 矩形を描画
   180 0000131F 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   180 00001328 FF6683C414          <1>
   181 0000132D 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   181 00001336 FF6683C414          <1>
   182                              <1> 
   183 0000133B 4A                  <1>     dec edx
   184 0000133C 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   184 00001345 FF6683C414          <1>
   185 0000134A 42                  <1>     inc edx
   186                              <1> 
   187 0000134B 49                  <1>     dec ecx
   188 0000134C 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   188 00001355 FF6683C414          <1>
   189                              <1> 
   190 0000135A 5E                  <1>     pop esi
   191 0000135B 5A                  <1>     pop edx
   192 0000135C 59                  <1>     pop ecx
   193 0000135D 5B                  <1>     pop ebx
   194 0000135E 58                  <1>     pop eax
   195                              <1>     
   196 0000135F 89EC                <1>     mov esp, ebp
   197 00001361 5D                  <1>     pop ebp
   198                              <1> 
   199 00001362 C3                  <1>     ret
   153                                  %include "../modules/protect/itoa.s"
   154                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   155                              <1> ; num   変換する値
   156                              <1> ; buff  保存先バッファアドレス
   157                              <1> ; size  保存先バッファサイズ
   158                              <1> ; radix 基数（2, 8, 10, 16)
   159                              <1> ; flags 
   160                              <1> ;   B2: 空白を'0'で埋める
   161                              <1> ;   B1: '+/-'記号を付加する
   162                              <1> ;   B0: 値を符号付き変数として扱う
   163                              <1> 
   164 00001363 55                  <1>     push ebp
   165 00001364 89E5                <1>     mov ebp, esp
   166                              <1> 
   167 00001366 50                  <1>     push eax
   168 00001367 53                  <1>     push ebx
   169 00001368 51                  <1>     push ecx
   170 00001369 52                  <1>     push edx
   171 0000136A 56                  <1>     push esi
   172 0000136B 57                  <1>     push edi
   173                              <1> 
   174                              <1> 
   175                              <1>     ; 引数取得
   176 0000136C 8B4508              <1>     mov eax, [ebp + 8]    ; num
   177 0000136F 8B750C              <1>     mov esi, [ebp +12]    ; size
   178 00001372 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   179                              <1> 
   180 00001375 89F7                <1>     mov edi, esi
   181 00001377 01CF                <1>     add edi, ecx
   182 00001379 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   183                              <1> 
   184 0000137A 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   185                              <1> 
   186                              <1>     ; 符号付き判定
   187 0000137D F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   188                              <1> .10Q:
   189 00001383 7408                <1>     je .10E         ; E=Exit
   190 00001385 83F800              <1>     cmp eax, 0
   191                              <1> .12Q:
   192 00001388 7D03                <1>     jge .12E
   193 0000138A 83CB02              <1>     or ebx, 0b0010
   194                              <1> .12E:
   195                              <1> .10E:
   196                              <1> 
   197                              <1>     ; 符号出力判定
   198 0000138D F7C302000000        <1>     test ebx, 0b0010
   199                              <1> .20Q:
   200 00001393 7410                <1>     je .20E
   201 00001395 83F800              <1>     cmp eax, 0
   202                              <1> .22Q:
   203 00001398 7D07                <1>     jge .22F
   204 0000139A F7D8                <1>     neg eax
   205 0000139C C6062D              <1>     mov [esi], byte '-'
   206 0000139F EB03                <1>     jmp .22E
   207                              <1> .22F:
   208                              <1>     
   209 000013A1 C6062B              <1>     mov [esi], byte '+'
   210                              <1> .22E:
   211 000013A4 49                  <1>     dec ecx
   212                              <1> .20E:
   213                              <1> 
   214                              <1>     ; ASCII変換
   215 000013A5 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   216                              <1> .30L:
   217 000013A8 BA00000000          <1>     mov edx, 0
   218 000013AD F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   219                              <1> 
   220 000013AF 89D6                <1>     mov esi, edx
   221 000013B1 8A96[DB130000]      <1>     mov dl, byte [.ascii + esi]
   222                              <1> 
   223 000013B7 8817                <1>     mov [edi], dl
   224 000013B9 4F                  <1>     dec edi
   225                              <1> 
   226 000013BA 83F800              <1>     cmp eax, 0
   227 000013BD E0E9                <1>     loopnz .30L
   228                              <1> .30E:
   229                              <1> 
   230                              <1>     ; 空欄を埋める
   231 000013BF 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   232                              <1> .40Q:
   233 000013C2 740D                <1>     je .40E
   234 000013C4 B020                <1>     mov al, ' '
   235 000013C6 837D1804            <1>     cmp [ebp +24], dword 0b0100
   236                              <1> .42Q:
   237 000013CA 7502                <1>     jne .42E
   238 000013CC B030                <1>     mov al, '0'
   239                              <1> .42E:
   240 000013CE FD                  <1>     std         ; dimention flag = 1(-方向)
   241 000013CF F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   242                              <1> .40E:
   243                              <1> 
   244 000013D1 5F                  <1>     pop edi
   245 000013D2 5E                  <1>     pop esi
   246 000013D3 5A                  <1>     pop edx
   247 000013D4 59                  <1>     pop ecx
   248 000013D5 5B                  <1>     pop ebx
   249 000013D6 58                  <1>     pop eax
   250                              <1> 
   251 000013D7 89EC                <1>     mov esp, ebp
   252 000013D9 5D                  <1>     pop ebp
   253                              <1> 
   254 000013DA C3                  <1>     ret
   255                              <1> 
   256 000013DB 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   256 000013E4 39414243444546      <1>
   154                                  %include "../modules/protect/rtc.s"
   155                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   156                              <1> ; dst: 保存先アドレス
   157                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   158 000013EB 55                  <1>     push ebp
   159 000013EC 89E5                <1>     mov ebp, esp
   160                              <1> 
   161 000013EE 50                  <1>     push eax
   162 000013EF 53                  <1>     push ebx
   163                              <1> 
   164 000013F0 B00A                <1>     mov al, 0x0A    ; レジスタA
   165 000013F2 E670                <1>     out 0x70, al
   166 000013F4 E471                <1>     in al, 0x71
   167 000013F6 A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   168 000013F8 7407                <1>     je .10F
   169 000013FA B801000000          <1>     mov eax, 1      ; 更新中は失敗
   170 000013FF EB27                <1>     jmp .10E
   171                              <1> .10F:
   172                              <1> 
   173 00001401 B004                <1>     mov al, 0x04    ; 時
   174 00001403 E670                <1>     out 0x70, al    ; レジスタ設定
   175 00001405 E471                <1>     in al, 0x71     ; 時刻読み込み
   176                              <1> 
   177 00001407 C1E008              <1>     shl eax, 8      ; alをahに退避
   178                              <1> 
   179 0000140A B002                <1>     mov al, 0x02    ; 分
   180 0000140C E670                <1>     out 0x70, al    ; レジスタ設定
   181 0000140E E471                <1>     in al, 0x71     ; 時刻読み込み
   182                              <1> 
   183 00001410 C1E008              <1>     shl eax, 8      ; alをahに退避
   184                              <1> 
   185 00001413 B000                <1>     mov al, 0x00    ; 秒
   186 00001415 E670                <1>     out 0x70, al    ; レジスタ設定
   187 00001417 E471                <1>     in al, 0x71     ; 時刻読み込み
   188                              <1> 
   189 00001419 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   190                              <1> 
   191 0000141E 8B5D08              <1>     mov ebx, [ebp + 8]
   192 00001421 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   193                              <1> 
   194 00001423 B800000000          <1>     mov eax, 0
   195                              <1> .10E:
   196                              <1> 
   197 00001428 5B                  <1>     pop ebx
   198 00001429 58                  <1>     pop eax
   199                              <1> 
   200 0000142A 89EC                <1>     mov esp, ebp
   201 0000142C 5D                  <1>     pop ebp
   202                              <1> 
   203 0000142D C3                  <1>     ret
   155                                  %include "../modules/protect/draw_time.s"
   156                              <1> draw_time:  ; void draw_time(col, row, color, time);
   157                              <1> ; time 時刻データ
   158 0000142E 55                  <1>     push ebp
   159 0000142F 89E5                <1>     mov ebp, esp
   160                              <1> 
   161 00001431 50                  <1>     push eax
   162 00001432 53                  <1>     push ebx
   163                              <1>     
   164 00001433 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   165 00001436 3B05[B1140000]      <1>     cmp eax, [.last]
   166 0000143C 7463                <1>     je .10E
   167 0000143E A3[B1140000]        <1>     mov [.last], eax
   168                              <1> 
   169 00001443 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   170 00001446 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   170 0000144D [AE140000]53E80CFF- <1>
   170 00001455 FFFF6683C414        <1>
   171                              <1> 
   172 0000145B 88E3                <1>     mov bl, ah          ; 分だけ
   173 0000145D 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   173 00001464 [AB140000]53E8F5FE- <1>
   173 0000146C FFFF6683C414        <1>
   174                              <1>     
   175 00001472 C1E810              <1>     shr eax, 16         ; 時だけ
   176 00001475 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   176 0000147C [A8140000]50E8DDFE- <1>
   176 00001484 FFFF6683C414        <1>
   177                              <1> 
   178 0000148A 68[A8140000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   178 00001492 FF750CFF7508E81EFC- <1>
   178 0000149B FFFF6683C410        <1>
   179                              <1> 
   180                              <1> .10E:
   181                              <1> 
   182 000014A1 5B                  <1>     pop ebx
   183 000014A2 58                  <1>     pop eax
   184                              <1> 
   185 000014A3 89EC                <1>     mov esp, ebp
   186 000014A5 5D                  <1>     pop ebp
   187                              <1> 
   188 000014A6 C3                  <1>     ret
   189                              <1> 
   190 000014A7 00                  <1> ALIGN 2, db 0
   191 000014A8 5A5A3A              <1> .hour: db "ZZ:"
   192 000014AB 5A5A3A              <1> .min:  db "ZZ:"
   193 000014AE 5A5A00              <1> .sec:  db "ZZ", 0
   194 000014B1 0000000000000000    <1> .last: dq 0
   156                                  %include "../modules/protect/interrupt.s"
   157                              <1> int_stop:
   158 000014B9 FB                  <1>     sti ; 割り込みを許可
   159                              <1> 
   160                              <1>     ; EAXで示される文字列を表示
   161 000014BA 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   161 000014C3 19E8F2FBFFFF6683C4- <1>
   161 000014CC 10                  <1>
   162                              <1> 
   163                              <1>     ; スタックのデータを文字列に変換
   164 000014CD 8B0424              <1>     mov eax, [esp + 0]
   165 000014D0 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   165 000014D7 [95150000]50E882FE- <1>
   165 000014DF FFFF6683C414        <1>
   166                              <1> 
   167 000014E5 8B442404            <1>     mov eax, [esp + 4]
   168 000014E9 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   168 000014F0 [A6150000]50E869FE- <1>
   168 000014F8 FFFF6683C414        <1>
   169                              <1> 
   170 000014FE 8B442408            <1>     mov eax, [esp + 8]
   171 00001502 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   171 00001509 [B7150000]50E850FE- <1>
   171 00001511 FFFF6683C414        <1>
   172                              <1> 
   173 00001517 8B44240C            <1>     mov eax, [esp +12]
   174 0000151B 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   174 00001522 [C8150000]50E837FE- <1>
   174 0000152A FFFF6683C414        <1>
   175                              <1> 
   176                              <1>     ; 文字列の表示
   177 00001530 68[8E150000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   177 00001538 00006A106A19E878FB- <1>
   177 00001541 FFFF6683C410        <1>
   178 00001547 68[9F150000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   178 0000154F 00006A116A19E861FB- <1>
   178 00001558 FFFF6683C410        <1>
   179 0000155E 68[B0150000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   179 00001566 00006A126A19E84AFB- <1>
   179 0000156F FFFF6683C410        <1>
   180 00001575 68[C1150000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   180 0000157D 00006A136A19E833FB- <1>
   180 00001586 FFFF6683C410        <1>
   181                              <1> 
   182                              <1>     ; 無限ループ
   183 0000158C EBFE                <1>     jmp $
   184                              <1> 
   185 0000158E 4553502B20303A      <1> .s1 db "ESP+ 0:"
   186 00001595 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   186 0000159E 00                  <1>
   187 0000159F 2020202B20343A      <1> .s2 db "   + 4:"
   188 000015A6 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   188 000015AF 00                  <1>
   189 000015B0 2020202B20383A      <1> .s3 db "   + 8:"
   190 000015B7 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   190 000015C0 00                  <1>
   191 000015C1 2020202B31323A      <1> .s4 db "   +12:"
   192 000015C8 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   192 000015D1 00                  <1>
   193                              <1> 
   194                              <1> int_default:
   195 000015D2 9C                  <1>     pushf       ; EFLAGS(IF==0)
   196 000015D3 0E                  <1>     push cs
   197 000015D4 68[B9140000]        <1>     push int_stop
   198                              <1> 
   199 000015D9 B8[DF150000]        <1>     mov eax, .s0
   200 000015DE CF                  <1>     iret
   201                              <1> 
   202 000015DF 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   202 000015E8 50202020203E2000    <1>
   203                              <1> 
   204                              <1> 
   205                              <1> ; 割り込みベクタの初期化
   206                              <1> ALIGN 4
   207 000015F0 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   208 000015F2 00001000            <1>       dd VECT_BASE      ; idt location
   209                              <1> 
   210                              <1> ; 割り込みテーブルを初期化
   211                              <1> init_int:
   212 000015F6 50                  <1>     push eax
   213 000015F7 53                  <1>     push ebx
   214 000015F8 51                  <1>     push ecx
   215 000015F9 57                  <1>     push edi
   216                              <1> 
   217                              <1>     ; 全ての割り込みにデフォルト処理を設定
   218 000015FA 8D05[D2150000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   219 00001600 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   220 00001605 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   221                              <1> 
   222 00001607 B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   223 0000160C BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   224                              <1> 
   225                              <1>     ; メモリに書き込み
   226                              <1> .10L:
   227 00001611 891F                <1>     mov [edi + 0], ebx
   228 00001613 894704              <1>     mov [edi + 4], eax
   229 00001616 83C708              <1>     add edi, 8
   230 00001619 E2F6                <1>     loop .10L
   231                              <1> 
   232                              <1>     ; 割り込みディスクリプタの設定
   233 0000161B 0F011D[F0150000]    <1>     lidt [IDTR]
   234                              <1> 
   235 00001622 5F                  <1>     pop edi
   236 00001623 59                  <1>     pop ecx
   237 00001624 5B                  <1>     pop ebx
   238 00001625 58                  <1>     pop eax
   239                              <1> 
   240 00001626 C3                  <1>     ret
   241                              <1> 
   242                              <1> 
   243                              <1> int_zero_div:
   244 00001627 9C                  <1>     pushf
   245 00001628 0E                  <1>     push cs
   246 00001629 68[B9140000]        <1>     push int_stop
   247                              <1> 
   248 0000162E B8[34160000]        <1>     mov eax, .s0
   249 00001633 CF                  <1>     iret
   250                              <1> 
   251 00001634 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   251 0000163D 44495620203E2000    <1>
   157                                  %include "../modules/protect/pic.s"
   158                              <1> init_pic:
   159 00001645 50                  <1>     push eax
   160                              <1> 
   161                              <1>     ; outp ポート, データ
   162                              <1> 
   163                              <1>     ; マスタの設定
   164                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    49 00001646 B011                <2>  mov al, %2
    50 00001648 E620                <2>  out %1, al
   165                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    49 0000164A B020                <2>  mov al, %2
    50 0000164C E621                <2>  out %1, al
   166                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    49 0000164E B004                <2>  mov al, %2
    50 00001650 E621                <2>  out %1, al
   167                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    49 00001652 B001                <2>  mov al, %2
    50 00001654 E621                <2>  out %1, al
   168                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    49 00001656 B0FF                <2>  mov al, %2
    50 00001658 E621                <2>  out %1, al
   169                              <1> 
   170                              <1>     ; スレーブの設定
   171                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    49 0000165A B011                <2>  mov al, %2
    50 0000165C E6A0                <2>  out %1, al
   172                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    49 0000165E B028                <2>  mov al, %2
    50 00001660 E6A1                <2>  out %1, al
   173                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    49 00001662 B002                <2>  mov al, %2
    50 00001664 E6A1                <2>  out %1, al
   174                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    49 00001666 B001                <2>  mov al, %2
    50 00001668 E6A1                <2>  out %1, al
   175                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    49 0000166A B0FF                <2>  mov al, %2
    50 0000166C E6A1                <2>  out %1, al
   176                              <1> 
   177 0000166E 58                  <1>     pop eax
   178                              <1> 
   179 0000166F C3                  <1>     ret
   158                                  %include "../modules/protect/int_rtc.s"
   159                              <1> int_rtc:
   160 00001670 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   161 00001671 1E                  <1>     push ds
   162 00001672 06                  <1>     push es
   163                              <1> 
   164                              <1>     ; データ用セグメントセレクタの設定
   165 00001673 66B81000            <1>     mov ax, 0x0010
   166 00001677 8ED8                <1>     mov ds, ax
   167 00001679 8EC0                <1>     mov es, ax
   168                              <1> 
   169                              <1>     ; RTCから時刻を取得
   170 0000167B 68[FC020000]E866FD- <1>     cdecl rtc_get_time, RTC_TIME
   170 00001683 FFFF6683C404        <1>
   171                              <1> 
   172                              <1>     ; RTCの割り込み要因を取得
   173                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    49 00001689 B00C                <2>  mov al, %2
    50 0000168B E670                <2>  out %1, al
   174 0000168D E471                <1>     in al, 0x71     ; RTCからデータを取得
   175                              <1> 
   176                              <1>     ; 割り込みフラグをクリア(EOI)
   177 0000168F B020                <1>     mov al, 0x20
   178 00001691 E6A0                <1>     out 0xA0, al    ; スレーブ
   179 00001693 E620                <1>     out 0x20, al    ; マスタ
   180                              <1> 
   181 00001695 07                  <1>     pop es
   182 00001696 1F                  <1>     pop ds
   183 00001697 61                  <1>     popa
   184                              <1> 
   185 00001698 CF                  <1>     iret        ; 割り込み処理の終了
   186                              <1> 
   187                              <1> rtc_int_en:
   188 00001699 55                  <1>     push ebp
   189 0000169A 89E5                <1>     mov ebp, esp
   190 0000169C 50                  <1>     push eax
   191                              <1> 
   192                              <1>     ; 割り込み許可設定
   193                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    49 0000169D B00B                <2>  mov al, %2
    50 0000169F E670                <2>  out %1, al
   194                              <1> 
   195 000016A1 E471                <1>     in al, 0x71     ; RTCからデータを取得
   196 000016A3 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   197                              <1> 
   198 000016A6 E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   199                              <1> 
   200 000016A8 58                  <1>     pop eax
   201                              <1> 
   202 000016A9 89EC                <1>     mov esp, ebp
   203 000016AB 5D                  <1>     pop ebp
   204                              <1> 
   205 000016AC C3                  <1>     ret
   159                                  %include "../modules/protect/int_keyboard.s"
   160                              <1> int_keyboard:
   161 000016AD 60                  <1>     pusha
   162 000016AE 1E                  <1>     push ds
   163 000016AF 06                  <1>     push es
   164                              <1> 
   165                              <1>     ; データ用セグメントの設定
   166 000016B0 66B81000            <1>     mov ax, 0x0010
   167 000016B4 8ED8                <1>     mov ds, ax
   168 000016B6 8EC0                <1>     mov es, ax
   169                              <1> 
   170                              <1>     ; KBCのバッファ読み取り
   171 000016B8 E460                <1>     in al, 0x60
   172                              <1> 
   173                              <1>     ; キーコードの保存
   174 000016BA 5068[D4160000]E857- <1>     cdecl ring_wr, _KEY_BUFF, eax
   174 000016C2 0000006683C408      <1>
   175                              <1> 
   176                              <1>     ; 割り込み終了コマンド送信
   177                              <1>     outp 0x20, 0x20
    49 000016C9 B020                <2>  mov al, %2
    50 000016CB E620                <2>  out %1, al
   178                              <1> 
   179 000016CD 07                  <1>     pop es
   180 000016CE 1F                  <1>     pop ds
   181 000016CF 61                  <1>     popa
   182                              <1> 
   183 000016D0 CF                  <1>     iret
   184                              <1> 
   185 000016D1 00<rep 3h>          <1> ALIGN 4, db 0
   186 000016D4 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   160                                  %include "../modules/protect/ring_buff.s"
   161                              <1> ring_rd:        ; int ring_rd(buff, data);
   162                              <1> ; buff リングバッファ
   163                              <1> ; data 読み込んだデータの保存先アドレス
   164                              <1> ; 戻り値: データあり(0以外), データなし(0)
   165                              <1> 
   166 000016EC 55                  <1>     push ebp
   167 000016ED 89E5                <1>     mov ebp, esp
   168                              <1> 
   169 000016EF 53                  <1>     push ebx
   170 000016F0 56                  <1>     push esi
   171 000016F1 57                  <1>     push edi
   172                              <1> 
   173                              <1>     ; 引数取得
   174 000016F2 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   175 000016F5 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   176                              <1> 
   177                              <1>     ; 読み込み位置を確認
   178 000016F8 B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   179 000016FD 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   180 000016FF 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   181 00001702 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   182                              <1> 
   183 00001704 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   184                              <1> 
   185 00001708 8807                <1>     mov [edi], al
   186                              <1> 
   187 0000170A 43                  <1>     inc ebx ; 次の読み込み位置
   188 0000170B 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   189 0000170E 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   190                              <1> 
   191 00001710 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   192                              <1> .10E:
   193                              <1> 
   194 00001715 5F                  <1>     pop edi
   195 00001716 5E                  <1>     pop esi
   196 00001717 5B                  <1>     pop ebx
   197                              <1> 
   198 00001718 89EC                <1>     mov esp, ebp
   199 0000171A 5D                  <1>     pop ebp
   200                              <1> 
   201 0000171B C3                  <1>     ret
   202                              <1> 
   203                              <1> 
   204                              <1> ring_wr:    ; int ring_wr(buff, data);
   205                              <1> ; buff シリンダバッファ
   206                              <1> ; data 書き込むデータ
   207                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   208 0000171C 55                  <1>     push ebp
   209 0000171D 89E5                <1>     mov ebp, esp
   210                              <1> 
   211 0000171F 53                  <1>     push ebx
   212 00001720 51                  <1>     push ecx
   213 00001721 56                  <1>     push esi
   214                              <1> 
   215 00001722 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   216                              <1> 
   217                              <1>     ; 書き込み位置を確認
   218 00001725 B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   219 0000172A 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   220 0000172D 89D9                <1>     mov ecx, ebx
   221 0000172F 41                  <1>     inc ecx                         ; 次の書き込み位置
   222 00001730 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   223                              <1> 
   224                              <1>     ; バッファフルなら処理しない
   225 00001733 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   226 00001735 740F                <1>     je .10E
   227                              <1> 
   228 00001737 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   229                              <1> 
   230 0000173A 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   231 0000173E 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   232 00001741 B801000000          <1>     mov eax, 1  ; 戻り値 成功
   233                              <1> .10E:
   234                              <1> 
   235 00001746 5E                  <1>     pop esi
   236 00001747 59                  <1>     pop ecx
   237 00001748 5B                  <1>     pop ebx
   238                              <1> 
   239 00001749 89EC                <1>     mov esp, ebp
   240 0000174B 5D                  <1>     pop ebp
   241                              <1> 
   242 0000174C C3                  <1>     ret
   243                              <1> 
   244                              <1> draw_key:
   245 0000174D 55                  <1>     push ebp
   246 0000174E 89E5                <1>     mov ebp, esp
   247                              <1> 
   248 00001750 60                  <1>     pusha
   249                              <1> 
   250 00001751 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   251 00001754 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   252 00001757 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   253                              <1> 
   254                              <1>     ; リングバッファの情報を取得
   255 0000175A 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   256 0000175C 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   257 0000175F B910000000          <1>     mov ecx, RING_ITEM_SIZE
   258                              <1> 
   259                              <1> .10L:
   260 00001764 4B                  <1>     dec ebx ; 読み込み位置
   261 00001765 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   262 00001768 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   263                              <1> 
   264 0000176B 6A046A106A0268-     <1>     cdecl itoa, eax, .tmp, 2, 16, 0b0100    ; キーコード->文字列
   264 00001772 [9C170000]50E8E7FB- <1>
   264 0000177A FFFF6683C414        <1>
   265 00001780 68[9C170000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   265 00001788 52E82DF9FFFF6683C4- <1>
   265 00001791 10                  <1>
   266                              <1> 
   267 00001792 83C203              <1>     add edx, 3  ; 表示位置更新
   268 00001795 E2CD                <1>     loop .10L
   269                              <1> .10E:
   270                              <1> 
   271 00001797 61                  <1>     popa
   272                              <1> 
   273 00001798 89EC                <1>     mov esp, ebp
   274 0000179A 5D                  <1>     pop ebp
   275                              <1> 
   276 0000179B C3                  <1>     ret
   277                              <1> 
   278                              <1> ALIGN 4, db 0
   279 0000179C 2D2D2000            <1> .tmp db "-- ", 0
   161                                  %include "../modules/protect/timer.s"
   162                              <1> int_en_timer0:
   163 000017A0 50                  <1>     push eax
   164                              <1> 
   165                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    49 000017A1 B034                <2>  mov al, %2
    50 000017A3 E643                <2>  out %1, al
   166                              <1>     outp 0x40, 0x9C             ; 下位バイト
    49 000017A5 B09C                <2>  mov al, %2
    50 000017A7 E640                <2>  out %1, al
   167                              <1>     outp 0x40, 0x2E             ; 上位バイト
    49 000017A9 B02E                <2>  mov al, %2
    50 000017AB E640                <2>  out %1, al
   168                              <1> 
   169 000017AD 58                  <1>     pop eax
   170                              <1> 
   171 000017AE C3                  <1>     ret
   162                                  %include "../modules/protect/draw_rotation_bar.s"
   163                              <1> draw_rotation_bar:
   164 000017AF 50                  <1>     push eax
   165                              <1> 
   166 000017B0 A1[400A0000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   167 000017B5 C1E804              <1>     shr eax, 4              ; eax /= 4
   168 000017B8 3B05[E0170000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   169 000017BE 741E                <1>     je .10E
   170                              <1> 
   171 000017C0 A3[E0170000]        <1>     mov [.index], eax       ; 前回値設定
   172 000017C5 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   173                              <1> 
   174 000017C8 8A80[E4170000]      <1>     mov al, [.table + eax]  ; 文字表示
   175 000017CE 506A0F6A1D6A00E8BD- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   175 000017D7 F7FFFF6683C410      <1>
   176                              <1> 
   177                              <1> .10E:
   178                              <1> 
   179 000017DE 58                  <1>     pop eax
   180                              <1> 
   181 000017DF C3                  <1>     ret
   182                              <1> 
   183                              <1> ALIGN 4, db 0
   184 000017E0 00000000            <1> .index: dd 0        ; 前回値
   185 000017E4 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   163                                  %include "../modules/protect/call_gate.s"
   164                              <1> call_gate:
   165 000017E8 55                  <1>     push ebp
   166 000017E9 89E5                <1>     mov ebp, esp
   167                              <1> 
   168 000017EB 60                  <1>     pusha
   169 000017EC 1E                  <1>     push ds
   170 000017ED 06                  <1>     push es
   171                              <1> 
   172                              <1>     ; データ用セグメントの設定
   173 000017EE 66B81000            <1>     mov ax, 0x0010
   174 000017F2 8ED8                <1>     mov ds, ax
   175 000017F4 8EC0                <1>     mov es, ax
   176                              <1> 
   177                              <1>     ; 文字を表示
   178 000017F6 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   179 000017F9 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   180 000017FC 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   181 000017FF 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   182 00001802 52515350E8B0F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   182 0000180B 6683C410            <1>
   183                              <1> 
   184 0000180F 07                  <1>     pop es
   185 00001810 1F                  <1>     pop ds
   186 00001811 61                  <1>     popa
   187                              <1> 
   188 00001812 89EC                <1>     mov esp, ebp
   189 00001814 5D                  <1>     pop ebp
   190                              <1> 
   191                              <1>     ; コードセグメントセレクタの復帰と終了
   192 00001815 CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   164                                  %include "../modules/protect/trap_gate.s"
   165                              <1> trap_gate_81:
   166                              <1>     ; 1文字出力
   167 00001818 50535251E876F7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   167 00001821 6683C410            <1>
   168                              <1> 
   169 00001825 CF                  <1>     iret
   170                              <1> 
   171                              <1> trap_gate_82:
   172                              <1>     ; 点の描画
   173 00001826 535251E845F9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   173 0000182F 83C40C              <1>
   174                              <1> 
   175 00001832 CF                  <1>     iret
   165                                  %include "../modules/protect/test_and_set.s"
   166                              <1> test_and_set:
   167 00001833 55                  <1>     push ebp
   168 00001834 89E5                <1>     mov ebp, esp
   169                              <1> 
   170 00001836 50                  <1>     push eax
   171 00001837 53                  <1>     push ebx
   172                              <1> 
   173                              <1>     ; テストアンドセット
   174 00001838 B800000000          <1>     mov eax, 0
   175 0000183D 8B5D08              <1>     mov ebx, [ebp + 8]
   176                              <1> 
   177                              <1>     ; bts命令 第1引数の第2引数ビットを読み込んだあと、そのビットを1にセットする。
   178                              <1>     ; lockプレフィックス 読み込みと書き込みを分割しない
   179                              <1> .10L:
   180 00001840 F00FAB03            <1>     lock bts [ebx], eax ; cf = 書き込む前のビットの状態
   181 00001844 7307                <1>     jnc .10E
   182                              <1> 
   183                              <1> .12L:
   184 00001846 0FA303              <1>     bt [ebx], eax       ; cf = 現在のビットの状態
   185 00001849 72FB                <1>     jc .12L
   186                              <1>     
   187 0000184B EBF3                <1>     jmp .10L
   188                              <1> .10E:
   189                              <1>     
   190 0000184D 5B                  <1>     pop ebx
   191 0000184E 58                  <1>     pop eax
   192                              <1> 
   193 0000184F 89EC                <1>     mov esp, ebp
   194 00001851 5D                  <1>     pop ebp
   195                              <1> 
   196 00001852 C3                  <1>     ret
   166                                  %include "../modules/protect/int_nm.s"
   167                              <1> get_tss_base:
   168                              <1> ; EBX: TSSセレクタ
   169                              <1>     ; EAX = TSS base address
   170 00001853 8B83[62030000]      <1>     mov eax, [GDT + ebx + 2]
   171 00001859 C1E008              <1>     shl eax, 8
   172 0000185C 8A83[67030000]      <1>     mov al, [GDT + ebx + 7]
   173 00001862 C1C808              <1>     ror eax, 8
   174                              <1> 
   175 00001865 C3                  <1>     ret
   176                              <1> 
   177                              <1> save_fpu_context:
   178 00001866 DD7068              <1>     fnsave [eax + 104]
   179 00001869 C780D4000000010000- <1>     mov [eax + 104 + 108], dword 1
   179 00001872 00                  <1>
   180                              <1> 
   181 00001873 C3                  <1>     ret
   182                              <1> 
   183                              <1> load_fpu_context:
   184 00001874 83B8D400000000      <1>     cmp [eax + 104 + 108], dword 0
   185 0000187B 7504                <1>     jne .10F    ; if(saved != 0) goto .10F
   186 0000187D DBE3                <1>     fninit      ; FPU初期化
   187 0000187F EB03                <1>     jmp .10E
   188                              <1> .10F:
   189 00001881 DD6068              <1>     frstor [eax + 104]  ; FPUコンテキストを復帰
   190                              <1> .10E:
   191 00001884 C3                  <1>     ret
   192                              <1> 
   193                              <1> int_nm:
   194 00001885 60                  <1>     pusha
   195 00001886 1E                  <1>     push ds
   196 00001887 06                  <1>     push es
   197                              <1> 
   198 00001888 66B81000            <1>     mov ax, DS_KERNEL
   199 0000188C 8ED8                <1>     mov ds, ax
   200 0000188E 8EC0                <1>     mov es, ax
   201                              <1> 
   202                              <1>     ; タスクスイッチフラグをクリア
   203 00001890 0F06                <1>     clts    ; CR0.TS = 0
   204                              <1> 
   205                              <1>     ; 前回・今回FPUを使用するタスク
   206 00001892 8B3D[DC180000]      <1>     mov edi, [.last_tss]; edi = 前回FPUを使用したタスクのTSS
   207 00001898 0F00CE              <1>     str esi             ; esi = 今回FPUを使用するタスクのTSS（trレジスタ）
   208 0000189B 83E6F8              <1>     and esi, ~0x0007    ; 特権レベルはいらないのでマスク
   209                              <1> 
   210                              <1>     ; 初回利用チェック
   211 0000189E 83FF00              <1>     cmp edi, 0          ; if(前回のタスク==0) goto .10F
   212 000018A1 7420                <1>     je .10F
   213                              <1> 
   214 000018A3 39FE                <1>     cmp esi, edi        ; if(前回のタスク==今回のタスク) goto .12E
   215 000018A5 741A                <1>     je .12E
   216                              <1> 
   217 000018A7 FA                  <1>     cli
   218                              <1> 
   219                              <1>     ; 前回のFPUコンテキストを保存
   220 000018A8 89FB                <1>     mov ebx, edi
   221 000018AA E8A4FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   222 000018AF E8B2FFFFFF          <1>     call save_fpu_context   ; void save_fpu_context(eax);
   223                              <1> 
   224                              <1>     ; 今回のFPUコンテキストを復帰
   225 000018B4 89F3                <1>     mov ebx, esi
   226 000018B6 E898FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   227 000018BB E8B4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   228                              <1> 
   229 000018C0 FB                  <1>     sti
   230                              <1> .12E:
   231 000018C1 EB0E                <1>     jmp .10E
   232                              <1> .10F:
   233 000018C3 FA                  <1>     cli
   234                              <1> 
   235                              <1>     ; 今回のFPUコンテキストを復帰
   236 000018C4 89F3                <1>     mov ebx, esi
   237 000018C6 E888FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   238 000018CB E8A4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   239                              <1> 
   240 000018D0 FB                  <1>     sti
   241                              <1> .10E:
   242                              <1> 
   243 000018D1 8935[DC180000]      <1>     mov [.last_tss], esi
   244                              <1> 
   245 000018D7 07                  <1>     pop es
   246 000018D8 1F                  <1>     pop ds
   247 000018D9 61                  <1>     popa
   248                              <1> 
   249 000018DA CF                  <1>     iret
   250                              <1> 
   251 000018DB 00                  <1> ALIGN 4, db 0
   252 000018DC 00000000            <1> .last_tss: dd 0
   167                                  %include "../modules/protect/wait_tick.s"
   168                              <1> wait_tick:
   169 000018E0 55                  <1>     push ebp
   170 000018E1 89E5                <1>     mov ebp, esp
   171                              <1> 
   172 000018E3 50                  <1>     push eax
   173 000018E4 51                  <1>     push ecx
   174                              <1> 
   175                              <1>     ; ウェイト
   176 000018E5 8B4D08              <1>     mov ecx, [ebp + 8]      ; ECX = ウェイト回数
   177 000018E8 A1[400A0000]        <1>     mov eax, [TIMER_COUNT]  ; EAX = TIMER
   178                              <1> 
   179                              <1> .10L:
   180 000018ED 3905[400A0000]      <1>     cmp [TIMER_COUNT], eax  ; for(i=0; i < ecx; i++) while(TIMER == eax);
   181 000018F3 74F8                <1>     je .10L
   182 000018F5 40                  <1>     inc eax
   183 000018F6 E2F5                <1>     loop .10L
   184                              <1> 
   185 000018F8 59                  <1>     pop ecx
   186 000018F9 58                  <1>     pop eax
   187                              <1> 
   188 000018FA 89EC                <1>     mov esp, ebp
   189 000018FC 5D                  <1>     pop ebp
   190                              <1> 
   191 000018FD C3                  <1>     ret
   168                                  %include "../modules/protect/memcpy.s"
   169                              <1> memcpy:     ; void memcpy(src, dest, size);
   170 000018FE 55                  <1>     push ebp
   171 000018FF 89E5                <1>     mov ebp, esp
   172                              <1> 
   173 00001901 51                  <1>     push ecx
   174 00001902 56                  <1>     push esi
   175 00001903 57                  <1>     push edi
   176                              <1> 
   177 00001904 FC                  <1>     cld     ; clear direction flag
   178 00001905 8B7D08              <1>     mov edi, [ebp + 8]     ; src
   179 00001908 8B750C              <1>     mov esi, [ebp + 12]    ; dest
   180 0000190B 8B4D10              <1>     mov ecx, [ebp + 16]    ; size
   181                              <1> 
   182 0000190E F3A4                <1>     rep movsb
   183                              <1> 
   184 00001910 5F                  <1>     pop edi
   185 00001911 5E                  <1>     pop esi
   186 00001912 59                  <1>     pop ecx
   187                              <1> 
   188 00001913 89EC                <1>     mov esp, ebp
   189 00001915 5D                  <1>     pop ebp
   190                              <1> 
   191 00001916 C3                  <1>     ret
   169                                  %include "../modules/protect/acpi_find.s"
   170                              <1> acpi_find:
   171                              <1> ; address: アドレス
   172                              <1> ; size:    サイズ
   173                              <1> ; word:    検索データ
   174                              <1> ; 戻り値 見つかったアドレス、見つからなかった場合は0
   175                              <1> 
   176                              <1> ; 4byteの名前空間を検索する
   177                              <1> 
   178 00001917 55                  <1>     push ebp
   179 00001918 89E5                <1>     mov ebp, esp
   180                              <1> 
   181 0000191A 51                  <1>     push ecx
   182 0000191B 57                  <1>     push edi
   183                              <1> 
   184                              <1>     ; 引数を取得
   185 0000191C 8B7D08              <1>     mov edi, [ebp + 8]  ; address
   186 0000191F 8B4D0C              <1>     mov ecx, [ebp +12]  ; size
   187 00001922 8B4510              <1>     mov eax, [ebp +16]  ; 検索データ
   188                              <1> 
   189                              <1>     ; 名前の検索
   190 00001925 FC                  <1>     cld
   191                              <1> .10L:
   192                              <1>     ; 最初の1バイトが一致するまで検索
   193 00001926 F2AE                <1>     repne scasb         ; while(AL != *EDI) EDI++
   194                              <1> 
   195 00001928 83F900              <1>     cmp ecx, 0
   196 0000192B 7507                <1>     jnz .11E            ; if(found) goto .11E
   197 0000192D B800000000          <1>     mov eax, 0          ; if(not found) eax = 0
   198 00001932 EB09                <1>     jmp .10E            ; goto .10E
   199                              <1> .11E:
   200                              <1> 
   201                              <1>     ; 一致した場合4バイトを比較する
   202 00001934 263B47FF            <1>     cmp eax, [es:edi - 1]   ; if(eax != *edi) goto .10L
   203 00001938 75EC                <1>     jne .10L
   204                              <1> 
   205 0000193A 4F                  <1>     dec edi     
   206 0000193B 89F8                <1>     mov eax, edi    ; eax = edi - 1;  
   207                              <1> .10E:
   208                              <1> 
   209 0000193D 5F                  <1>     pop edi
   210 0000193E 59                  <1>     pop ecx
   211                              <1> 
   212 0000193F 89EC                <1>     mov esp, ebp
   213 00001941 5D                  <1>     pop ebp
   214 00001942 C3                  <1>     ret
   170                                  %include "../modules/protect/acpi_package_value.s"
   171                              <1> acpi_package_value:
   172 00001943 55                  <1>     push ebp
   173 00001944 89E5                <1>     mov ebp, esp
   174                              <1> 
   175 00001946 56                  <1>     push esi
   176                              <1> 
   177                              <1>     ; 引数取得
   178 00001947 8B7508              <1>     mov esi, [ebp + 8]      ; パッケージへのアドレス
   179                              <1> 
   180                              <1>     ; パケットのヘッダをスキップ
   181 0000194A 46                  <1>     inc esi     ; skip 'PackageOp'
   182 0000194B 46                  <1>     inc esi     ; skip 'PkgLength'
   183 0000194C 46                  <1>     inc esi     ; skip 'NumElements'
   184                              <1> 
   185                              <1>     ; 2バイトのみを取得
   186 0000194D 8A06                <1>     mov al, [esi]
   187 0000194F 3C0B                <1>     cmp al, 0x0B
   188 00001951 740A                <1>     je .C0B
   189 00001953 3C0C                <1>     cmp al, 0x0C
   190 00001955 7406                <1>     je .C0C
   191 00001957 3C0E                <1>     cmp al, 0x0E
   192 00001959 7402                <1>     je .C0E
   193 0000195B EB08                <1>     jmp .C0A
   194                              <1> 
   195                              <1> .C0B:                   ; case 0x0B:    'WordPrefix'
   196                              <1> .C0C:                   ; case 0x0C:    'DWordPrefix'
   197                              <1> .C0E:                   ; case 0x0D:    'QWordPrefix'
   198 0000195D 8A4601              <1>     mov al, [esi + 1]
   199 00001960 8A6602              <1>     mov ah, [esi + 2]
   200 00001963 EB13                <1>     jmp .10E
   201                              <1> 
   202                              <1> .C0A:                   ; default:      'BytePrefix' | 'ConstObj'
   203                              <1>     ; 最初の1バイト
   204 00001965 3C0A                <1>     cmp al, 0x0A
   205 00001967 7504                <1>     jne .11E
   206 00001969 8A4601              <1>     mov al, [esi + 1]
   207 0000196C 46                  <1>     inc esi
   208                              <1> .11E:
   209                              <1>     ; 次の1バイト
   210 0000196D 46                  <1>     inc esi
   211                              <1> 
   212 0000196E 8A26                <1>     mov ah, [esi]
   213 00001970 80FC0A              <1>     cmp ah, 0x0A
   214 00001973 7503                <1>     jne .12E
   215 00001975 8A6601              <1>     mov ah, [esi + 1]
   216                              <1> .12E:
   217                              <1> .10E:
   218                              <1> 
   219 00001978 5E                  <1>     pop esi
   220                              <1> 
   221 00001979 89EC                <1>     mov esp, ebp
   222 0000197B 5D                  <1>     pop ebp
   223                              <1> 
   224 0000197C C3                  <1>     ret
   171                                  %include "../modules/protect/find_rsdt_entry.s"
   172                              <1> find_rsdt_entry:
   173                              <1> ; facp: RSDTテーブルのアドレス
   174                              <1> ; word: テーブル識別子
   175                              <1> ; 戻り値: 見つかったアドレス、見つからなかった場合は0
   176 0000197D 55                  <1>     push ebp
   177 0000197E 89E5                <1>     mov ebp, esp
   178                              <1> 
   179 00001980 53                  <1>     push ebx
   180 00001981 51                  <1>     push ecx
   181 00001982 56                  <1>     push esi
   182 00001983 57                  <1>     push edi
   183                              <1> 
   184 00001984 8B7508              <1>     mov esi, [ebp + 8]  ; RSDT
   185 00001987 8B4D0C              <1>     mov ecx, [ebp +12]  ; 名前
   186 0000198A BB00000000          <1>     mov ebx, 0          ; adr = 0
   187                              <1> 
   188                              <1>     ; ACPIテーブル検索処理
   189 0000198F 89F7                <1>     mov edi, esi
   190 00001991 037E04              <1>     add edi, [esi + 4]  ; EDI = テーブル長
   191 00001994 83C624              <1>     add esi, 36         ; ESI = エントリの開始アドレス
   192                              <1> .10L:
   193 00001997 39FE                <1>     cmp esi, edi
   194 00001999 7D0B                <1>     jge .10E
   195                              <1> 
   196 0000199B AD                  <1>     lodsd               ; eax = [esi++]
   197                              <1> 
   198 0000199C 3908                <1>     cmp [eax], ecx
   199 0000199E 7504                <1>     jne .12E            ; if(!テーブル名一致) goto .12E
   200 000019A0 89C3                <1>     mov ebx, eax
   201 000019A2 EB02                <1>     jmp .10E            ; if(テーブル名一致) ebx = アドレス
   202                              <1> .12E:
   203 000019A4 EBF1                <1>     jmp .10L
   204                              <1> .10E:
   205                              <1> 
   206 000019A6 89D8                <1>     mov eax, ebx        ; 戻り値 = ebx
   207                              <1> 
   208 000019A8 5F                  <1>     pop edi
   209 000019A9 5E                  <1>     pop esi
   210 000019AA 59                  <1>     pop ecx
   211 000019AB 5B                  <1>     pop ebx
   212                              <1> 
   213 000019AC 89EC                <1>     mov esp, ebp
   214 000019AE 5D                  <1>     pop ebp
   215                              <1> 
   216 000019AF C3                  <1>     ret
   217                              <1> 
   172                                  %include "../modules/protect/power_off.s"
   173                              <1> power_off:
   174 000019B0 55                  <1>     push ebp
   175 000019B1 89E5                <1>     mov ebp, esp
   176                              <1> 
   177 000019B3 60                  <1>     pusha
   178                              <1> 
   179                              <1>     ; ページングを無効化
   180 000019B4 0F20C0              <1>     mov eax, cr0
   181 000019B7 25FFFFFF7F          <1>     and eax, 0x7FFF_FFFF    ; CR0 &= &PG
   182 000019BC 0F22C0              <1>     mov cr0, eax
   183 000019BF EB00                <1>     jmp $ + 2
   184                              <1> 
   185                              <1>     ; ACPIデータの確認
   186 000019C1 A1047E0000          <1>     mov eax, [0x7C00 + 512 + 4] ; ACPI.addr
   187 000019C6 8B1D087E0000        <1>     mov ebx, [0x7C00 + 512 + 8] ; ACPI.len
   188 000019CC 83F800              <1>     cmp eax, 0
   189 000019CF 7473                <1>     je .10E     ; if(ACPI.addr == NULL) goto .10E
   190                              <1>     
   191                              <1>     ; RSDTテーブルの検索
   192 000019D1 68525344545350E83A- <1>     cdecl acpi_find, eax, ebx, 'RSDT'   ; eax = acpi_find('RSDT')
   192 000019DA FFFFFF6683C40C      <1>
   193 000019E1 83F800              <1>     cmp eax, 0
   194 000019E4 745E                <1>     je .10E     ; if(RSDT is not found) goto .10E
   195                              <1> 
   196                              <1>     ; FACPテーブルの検索
   197 000019E6 684641435050E88CFF- <1>     cdecl find_rsdt_entry, eax, 'FACP'  ; eax = find_rsdt_entry('FACP')
   197 000019EF FFFF6683C408        <1>
   198 000019F5 83F800              <1>     cmp eax, 0
   199 000019F8 744A                <1>     je .10E     ; if(FACP is not found) goto .10E
   200                              <1> 
   201 000019FA 8B5828              <1>     mov ebx, [eax + 40] ; DSDT(差分システムディスクリプタテーブル)アドレスの取得
   202 000019FD 83FB00              <1>     cmp ebx, 0          ; if(DSDT == NULL) goto .10E
   203 00001A00 7442                <1>     je .10E
   204                              <1> 
   205                              <1>     ; ACPIレジスタの保存
   206 00001A02 8B4840              <1>     mov ecx, [eax + 64]     ; ACPIレジスタの取得
   207 00001A05 890D[181B0000]      <1>     mov [PM1a_CNT_BLK], ecx ; PM1a_CNT_BLK = FACP.PM1a_CNT_BLK
   208                              <1> 
   209 00001A0B 8B4844              <1>     mov ecx, [eax + 68]     ; ACPIレジスタの取得
   210 00001A0E 890D[1C1B0000]      <1>     mov [PM1b_CNT_BLK], ecx ; PM1b_CNT_BLK = FACP.PM1b_CNT_BLK
   211                              <1> 
   212                              <1> 
   213                              <1>     ; S5名前空間の検索
   214 00001A14 8B4B04              <1>     mov ecx, [ebx + 4]      ; ECX = DSDT.Length
   215 00001A17 83E924              <1>     sub ecx, 36             ; テーブルヘッダ分減算
   216 00001A1A 83C324              <1>     add ebx, 36             ; テーブルヘッダ分加算
   217 00001A1D 685F53355F5153E8EE- <1>     cdecl acpi_find, ebx, ecx, '_S5_'   ; eax = acpi_find('_S5_');
   217 00001A26 FEFFFF6683C40C      <1>
   218 00001A2D 83F800              <1>     cmp eax, 0
   219 00001A30 7412                <1>     je .10E                 ; if(_S5_ addr == NULL) goto .10E
   220                              <1> 
   221                              <1> 
   222                              <1>     ; パッケージデータの取得
   223 00001A32 83C004              <1>     add eax, 4                      ; eax = 先頭の要素
   224 00001A35 50E808FFFFFF6683C4- <1>     cdecl acpi_package_value, eax   ; eax = パッケージデータ
   224 00001A3E 04                  <1>
   225 00001A3F A3[201B0000]        <1>     mov [S5_PACKAGE], eax           ; S5_PACKAGE = eax
   226                              <1> 
   227                              <1> .10E:
   228                              <1> 
   229                              <1>     ; ページングを有効化
   230 00001A44 0F20C0              <1>     mov eax, cr0
   231 00001A47 0D00000080          <1>     or eax, (1 << 31)       ; CR0 |= PG
   232 00001A4C 0F22C0              <1>     mov cr0, eax
   233 00001A4F EB00                <1>     jmp $ + 2
   234                              <1> 
   235                              <1>     ; ACPIレジスタの取得
   236 00001A51 8B15[181B0000]      <1>     mov edx, [PM1a_CNT_BLK]
   237 00001A57 83FA00              <1>     cmp edx, 0
   238 00001A5A 7478                <1>     je .20E     ; if(PM1a_CNT_BLK == NULL) goto .20E
   239                              <1> 
   240                              <1>     ; カウントダウンの表示
   241 00001A5C 68[121B0000]680F02- <1>     cdecl draw_str, 38, 14, 0x020F, .s3
   241 00001A64 00006A0E6A26E84CF6- <1>
   241 00001A6D FFFF6683C410        <1>
   242 00001A73 6A64E866FEFFFF6683- <1>     cdecl wait_tick, 100
   242 00001A7C C404                <1>
   243 00001A7E 68[0F1B0000]680F02- <1>     cdecl draw_str, 38, 14, 0x020F, .s2
   243 00001A86 00006A0E6A26E82AF6- <1>
   243 00001A8F FFFF6683C410        <1>
   244 00001A95 6A64E844FEFFFF6683- <1>     cdecl wait_tick, 100
   244 00001A9E C404                <1>
   245 00001AA0 68[0C1B0000]680F02- <1>     cdecl draw_str, 38, 14, 0x020F, .s1
   245 00001AA8 00006A0E6A26E808F6- <1>
   245 00001AB1 FFFF6683C410        <1>
   246 00001AB7 6A64E822FEFFFF6683- <1>     cdecl wait_tick, 100
   246 00001AC0 C404                <1>
   247                              <1> 
   248                              <1>     ; PM1a_CNT_BLKの設定
   249 00001AC2 660FB605[201B0000]  <1>     movzx ax, [S5_PACKAGE.0]    ; PM1a_CNT_BLK
   250 00001ACA 66C1E00A            <1>     shl ax, 10      ; ax = SLP_TYPx
   251 00001ACE 660D0020            <1>     or ax, 1 << 13  ; ax |= SLP_EN
   252 00001AD2 66EF                <1>     out dx, ax      ; out(PM1a_CNT_BLK, ax)
   253                              <1> 
   254                              <1> .20E:
   255                              <1> 
   256                              <1>     ; 電断待ち
   257 00001AD4 6A64E805FEFFFF6683- <1>     cdecl wait_tick, 100    ; 100msウェイト
   257 00001ADD C404                <1>
   258                              <1> 
   259                              <1>     ; 電断失敗メッセージ
   260 00001ADF 68[151B0000]680F02- <1>     cdecl draw_str, 38, 14, 0x020F, .s4
   260 00001AE7 00006A0E6A26E8C9F5- <1>
   260 00001AF0 FFFF6683C410        <1>
   261                              <1> 
   262 00001AF6 61                  <1>     popa
   263                              <1> 
   264 00001AF7 89EC                <1>     mov esp, ebp
   265 00001AF9 5D                  <1>     pop ebp
   266                              <1> 
   267 00001AFA C3                  <1>     ret
   268                              <1> 
   269 00001AFB 00                  <1> ALIGN 4, db 0
   270 00001AFC 506F776572206F6666- <1> .s0: db "Power off...   ", 0
   270 00001B05 2E2E2E20202000      <1>
   271 00001B0C 203100              <1> .s1: db " 1", 0
   272 00001B0F 203200              <1> .s2: db " 2", 0
   273 00001B12 203300              <1> .s3: db " 3", 0
   274 00001B15 4E4700              <1> .s4: db "NG", 0
   275 00001B18 00000000            <1> PM1a_CNT_BLK:   dd 0
   276 00001B1C 00000000            <1> PM1b_CNT_BLK:   dd 0
   277                              <1> S5_PACKAGE:
   278 00001B20 00                  <1> .0: db 0
   279 00001B21 00                  <1> .1: db 0
   280 00001B22 00                  <1> .2: db 0
   281 00001B23 00                  <1> .3: db 0
   173                                  %include "../modules/protect/ctrl_alt_end.s"
   174                              <1> ctrl_alt_end:       ; int ctrl_alt_end(key)
   175 00001B24 55                  <1>     push ebp
   176 00001B25 89E5                <1>     mov ebp, esp
   177                              <1> 
   178                              <1> 
   179                              <1> ; key: 入力されたキーコード
   180                              <1> ; 戻り値: ctrl+alt+endキーの同時押下が検出されたとき、0以外の値
   181                              <1>     
   182                              <1>     ; キー状態保存
   183 00001B27 8B4508              <1>     mov eax, [ebp + 8]      ; eax = key
   184 00001B2A 0FBAF007            <1>     btr eax, 7              ; cf = eax & 0b0000_0000_1000_0000
   185 00001B2E 7209                <1>     jc .10F                 ; if(cf == 1) goto .10F
   186 00001B30 0FAB05[761B0000]    <1>     bts [.key_state], eax   ; セット
   187 00001B37 EB07                <1>     jmp .10E
   188                              <1> .10F:
   189 00001B39 0FB305[761B0000]    <1>     btr [.key_state], eax   ; クリア
   190                              <1> .10E:
   191                              <1> 
   192                              <1>     ; キー押下判定
   193 00001B40 B81D000000          <1>     mov eax, 0x1D           ; ctrl
   194 00001B45 0FA305[761B0000]    <1>     bt [.key_state], eax    ; if(.key_state[ctrl] == 0) goto .20E
   195 00001B4C 7321                <1>     jnc .20E
   196                              <1> 
   197 00001B4E B838000000          <1>     mov eax, 0x38           ; alt
   198 00001B53 0FA305[761B0000]    <1>     bt [.key_state], eax    ; if(.key_state[alt] == 0) goto .20E
   199 00001B5A 7313                <1>     jnc .20E
   200                              <1> 
   201 00001B5C B84F000000          <1>     mov eax, 0x4F           ; end
   202 00001B61 0FA305[761B0000]    <1>     bt [.key_state], eax    ; if(.key_state[end] == 0) goto .20E
   203 00001B68 7305                <1>     jnc .20E
   204                              <1> 
   205 00001B6A B8FFFFFFFF          <1>     mov eax, -1             ; 3つのキーが押されていたら0以外
   206                              <1> 
   207                              <1> .20E:
   208 00001B6F C1F808              <1>     sar eax, 8              ; 先頭1ビットで埋める
   209                              <1> 
   210 00001B72 89EC                <1>     mov esp, ebp
   211 00001B74 5D                  <1>     pop ebp
   212                              <1> 
   213 00001B75 C3                  <1>     ret
   214                              <1> 
   215 00001B76 00<rep 20h>         <1> .key_state: times 32 db 0
   174                                  
   175                                  ;パディング
   176 00001B96 00<rep 46Ah>                times KERNEL_SIZE - ($ - $$) db 0
   177                                  
   178                                  ; FAT
   179                                  %include "fat.s"
   180                              <1> ; FAT:FAT-1
   181                              <1>     times (FAT1_START) - ($ - $$) db 0x00
   182                              <1> 
   183                              <1> FAT1:
   184 00002000 FFFF                <1>     db 0xFF, 0xFF   ; クラスタ：0
   185 00002002 FFFF                <1>     dw 0xFFFF       ; クラスタ：1
   186 00002004 FFFF                <1>     dw 0xFFFF       ; クラスタ：2
   187                              <1> 
   188                              <1> ; FAT:FAT-2
   189 00002006 00<rep 1FFFAh>      <1>     times (FAT2_START) - ($ - $$) db 0x00
   190                              <1> 
   191                              <1> FAT2:
   192 00022000 FFFF                <1>     db 0xFF, 0xFF   ; クラスタ：0
   193 00022002 FFFF                <1>     dw 0xFFFF       ; クラスタ：1
   194 00022004 FFFF                <1>     dw 0xFFFF       ; クラスタ：2
   195                              <1> 
   196                              <1> ; FAT:ルートディレクトリ領域
   197 00022006 00<rep 1FFFAh>      <1>     times (ROOT_START) - ($ - $$) db 0x00
   198                              <1> 
   199                              <1> FAT_ROOT:
   200 00042000 424F4F5441424C4544- <1>     db 'BOOTABLE', 'DSK'                ; ボリュームラベル
   200 00042009 534B                <1>
   201 0004200B 28                  <1>     db ATTR_ARCHIVE | ATTR_VOLUME_ID    ; 属性
   202 0004200C 00                  <1>     db 0x00                             ; 予約
   203 0004200D 00                  <1>     db 0x00                             ; TS
   204 0004200E 0000                <1>     dw ( 0 << 11) | ( 0 << 5)| (0 / 2)  ; 作成時刻
   205 00042010 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; 作成日
   206 00042012 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; アクセス日
   207 00042014 0000                <1>     dw 0x0000                           ; 予約
   208 00042016 0000                <1>     dw ( 0 << 11) | ( 0 << 5)| (0 / 2)  ; 更新時刻
   209 00042018 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; 更新日
   210 0004201A 0000                <1>     dw 0                                ; 先頭クラスタ
   211 0004201C 00000000            <1>     dd 0                                ; ファイルサイズ
   212                              <1> 
   213 00042020 5350454349414C2054- <1>     db 'SPECIAL ', 'TXT'                ; ボリュームラベル
   213 00042029 5854                <1>
   214 0004202B 20                  <1>     db ATTR_ARCHIVE                     ; 属性
   215 0004202C 00                  <1>     db 0x00                             ; 予約
   216 0004202D 00                  <1>     db 0x00                             ; TS
   217 0004202E 0000                <1>     dw ( 0 << 11) | ( 0 << 5)| (0 / 2)  ; 作成時刻
   218 00042030 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; 作成日
   219 00042032 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; アクセス日
   220 00042034 0000                <1>     dw 0x0000                           ; 予約
   221 00042036 0000                <1>     dw ( 0 << 11) | ( 0 << 5)| (0 / 2)  ; 更新時刻
   222 00042038 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; 更新日
   223 0004203A 0200                <1>     dw 2                                ; 先頭クラスタ
   224 0004203C 0B000000            <1>     dd FILE.end - FILE                  ; ファイルサイズ
   225                              <1> 
   226                              <1> 
   227                              <1> ; FAT:データ領域
   228 00042040 00<rep 3FC0h>       <1>     times FILE_START - ($ - $$) db 0x00
   229 00046000 68656C6C6F2C204641- <1> FILE: db 'hello, FAT!'
   229 00046009 5421                <1>
   230 0004600B 00                  <1> .end: db 0
   231                              <1> 
   232 0004600C 00<rep 1F4h>        <1> ALIGN 512, db 0x00
   233 00046200 00<rep 7E00h>       <1> times (512 * 63) db 0x00
